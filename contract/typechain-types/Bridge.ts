/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BridgeInterface extends utils.Interface {
  contractName: "Bridge";
  functions: {
    "lock(address,bytes32,uint256)": FunctionFragment;
    "relayer()": FunctionFragment;
    "unlock(address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "relayer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "Lock(address,address,bytes32,uint256,uint256)": EventFragment;
    "Unlock(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
}

export type LockEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    token: string;
    sender: string;
    toAddr: string;
    amount: BigNumber;
    lockSequence: BigNumber;
  }
>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export type UnlockEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    token: string;
    toAddr: string;
    amount: BigNumber;
    unlockSequence: BigNumber;
  }
>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export interface Bridge extends BaseContract {
  contractName: "Bridge";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lock(
      token: string,
      toAddr: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayer(overrides?: CallOverrides): Promise<[string]>;

    unlock(
      token: string,
      toAddr: string,
      amount: BigNumberish,
      unlockSequence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lock(
    token: string,
    toAddr: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayer(overrides?: CallOverrides): Promise<string>;

  unlock(
    token: string,
    toAddr: string,
    amount: BigNumberish,
    unlockSequence: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lock(
      token: string,
      toAddr: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    relayer(overrides?: CallOverrides): Promise<string>;

    unlock(
      token: string,
      toAddr: string,
      amount: BigNumberish,
      unlockSequence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Lock(address,address,bytes32,uint256,uint256)"(
      token?: string | null,
      sender?: string | null,
      toAddr?: BytesLike | null,
      amount?: null,
      lockSequence?: null
    ): LockEventFilter;
    Lock(
      token?: string | null,
      sender?: string | null,
      toAddr?: BytesLike | null,
      amount?: null,
      lockSequence?: null
    ): LockEventFilter;

    "Unlock(address,address,uint256,uint256)"(
      token?: string | null,
      toAddr?: string | null,
      amount?: null,
      unlockSequence?: null
    ): UnlockEventFilter;
    Unlock(
      token?: string | null,
      toAddr?: string | null,
      amount?: null,
      unlockSequence?: null
    ): UnlockEventFilter;
  };

  estimateGas: {
    lock(
      token: string,
      toAddr: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayer(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      token: string,
      toAddr: string,
      amount: BigNumberish,
      unlockSequence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lock(
      token: string,
      toAddr: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      token: string,
      toAddr: string,
      amount: BigNumberish,
      unlockSequence: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
