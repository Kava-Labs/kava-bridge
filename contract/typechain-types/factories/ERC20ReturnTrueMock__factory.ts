/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20ReturnTrueMock,
  ERC20ReturnTrueMockInterface,
} from "../ERC20ReturnTrueMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "allowance_",
        type: "uint256",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107d2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063095ea7b31461005c57806323b872dd1461008c5780633ba93f26146100bc578063a9059cbb146100d8578063dd62ed3e14610108575b600080fd5b6100766004803603810190610071919061063c565b610138565b6040516100839190610697565b60405180910390f35b6100a660048036038101906100a191906106b2565b610228565b6040516100b39190610697565b60405180910390f35b6100d660048036038101906100d19190610705565b610319565b005b6100f260048036038101906100ed919061063c565b6103e3565b6040516100ff9190610697565b60405180910390f35b610122600480360381019061011d9190610732565b6104d3565b60405161012f9190610781565b60405180910390f35b60006101667f6e7848e61e60d5024e26b22d6eb9320c5782425407c21c3cfce4f8612e0cfe5060001b6105a0565b6101927f06924df6cc6387e4ef4f400e95629f2b70a22c10c43097eb50392ed0844c5c8c60001b6105a0565b6101be7f2267b00131d8bb51e29376259d87a2143a3cf67ba29b61d2183bc4b7256f093460001b6105a0565b60006001819055506101f27f033ea6e3129b9c74427b637cbab869c6f0cd11c4cd9699333ae0d5077d37b31660001b6105a0565b61021e7fd255a976db671b5c0a9dd56d230c33ccdb57404853aeca7f958732ab57ee924160001b6105a0565b6001905092915050565b60006102567f4f08fd633a814f631a2e0de87a1d1633fe8c283f225803510845ea047c3f030b60001b6105a0565b6102827fa61349bce2cdcc22d6b3e0d8b575f97808291ef596e65786fbc111cebe88c30660001b6105a0565b6102ae7f1cf5e78f9bbfabed675e261671030951ce46aaa0d2a27166312a4bd9afa8979b60001b6105a0565b60006001819055506102e27fa3b86bf9bcf0e6c2784e306d8aecfae084f784eea205209ad4a6bd280a4921a660001b6105a0565b61030e7ff788d834983c2231615876eeefa09b2ab3ba40a88926ac5a10dce6ba7267098360001b6105a0565b600190509392505050565b6103457f5cd957f025d07849f5517f9b687ffcff7bddc39b106ac3eff403c4c8766420ab60001b6105a0565b6103717fa267ea3b023b9c25319533d67cfcbb0d367348472546407059f31ebbef389fcb60001b6105a0565b61039d7ff03a7fb9b4ac6eed7419ab08bc941e3523e4bcdc0d0ce8d12677f881c1b54c9e60001b6105a0565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60006104117f263c42448206bcfde5eb6bdc6ab9e3761c6fe10e44e8c0080b73f4d8b3dc75c460001b6105a0565b61043d7f134202fb66c7b987811e7dafdeeac98b37b429010884e46fb8ecf0272000eb1560001b6105a0565b6104697fa42b35e126109e77a67298720219ac47be8ce53119a88fc4185c8d5a27fb8ca060001b6105a0565b600060018190555061049d7fd2dff1e1f842a217c8a82454fcb48c6a1af5d6cd71a5e17fe75ee18b33ff5a7f60001b6105a0565b6104c97fd76c46273cd9ce4f2a068dc3949c569cef533cfd1de5bb7a2ba70883c933c25f60001b6105a0565b6001905092915050565b60006105017f12d9510b8c334235dbd4a0f71d56245c45e204052edb7839fa2acc07c92aa77660001b6105a0565b61052d7fcb68d9fa462a90e34b638e1956ea4d44700e2cc104f1dcdb663cd916d63b041c60001b6105a0565b6105597fe50c6a5fa2c3084c1be07c894f71bdf3e89e99bfbb81ac2c4feb84723c9effb760001b6105a0565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105d3826105a8565b9050919050565b6105e3816105c8565b81146105ee57600080fd5b50565b600081359050610600816105da565b92915050565b6000819050919050565b61061981610606565b811461062457600080fd5b50565b60008135905061063681610610565b92915050565b60008060408385031215610653576106526105a3565b5b6000610661858286016105f1565b925050602061067285828601610627565b9150509250929050565b60008115159050919050565b6106918161067c565b82525050565b60006020820190506106ac6000830184610688565b92915050565b6000806000606084860312156106cb576106ca6105a3565b5b60006106d9868287016105f1565b93505060206106ea868287016105f1565b92505060406106fb86828701610627565b9150509250925092565b60006020828403121561071b5761071a6105a3565b5b600061072984828501610627565b91505092915050565b60008060408385031215610749576107486105a3565b5b6000610757858286016105f1565b9250506020610768858286016105f1565b9150509250929050565b61077b81610606565b82525050565b60006020820190506107966000830184610772565b9291505056fea2646970667358221220b0fb06899bfeb094923832ff714defa9294bfcdf7c82eb9f4c5dc9214d7767b764736f6c63430008090033";

type ERC20ReturnTrueMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ReturnTrueMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20ReturnTrueMock__factory extends ContractFactory {
  constructor(...args: ERC20ReturnTrueMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20ReturnTrueMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20ReturnTrueMock> {
    return super.deploy(overrides || {}) as Promise<ERC20ReturnTrueMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20ReturnTrueMock {
    return super.attach(address) as ERC20ReturnTrueMock;
  }
  connect(signer: Signer): ERC20ReturnTrueMock__factory {
    return super.connect(signer) as ERC20ReturnTrueMock__factory;
  }
  static readonly contractName: "ERC20ReturnTrueMock";
  public readonly contractName: "ERC20ReturnTrueMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ReturnTrueMockInterface {
    return new utils.Interface(_abi) as ERC20ReturnTrueMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20ReturnTrueMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20ReturnTrueMock;
  }
}
