/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20EvilUnlockMock,
  ERC20EvilUnlockMockInterface,
} from "../ERC20EvilUnlockMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610474806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004a60048036038101906100459190610373565b610060565b60405161005791906103ce565b60405180910390f35b600061008e7f58794bf6ffb185025d8bc6a6772ac538c9f9ced252c5b3f76be440f8b375a0b460001b6102d7565b6100ba7f16f8a6b63470d4aaeb5d8a6e727c656e9d70b8ff825eae2488e529cddcc1fa1a60001b6102d7565b6100e67f3758969dee3e75fd0554163f21bf9ae05c8cf48c85b11e5aed61917ba912f4e960001b6102d7565b6000805414156102485761011c7f1af8e0c381ee94a8d5b8de7aa0bca10b878bc04b4940835e168820f55e28aeba60001b6102d7565b6101487f303fd3b585b5b98096c1728f2fb1bf57b0a39e8a4c4ab4c2c968712b919d345a60001b6102d7565b6101747fe66cca2adf449d578862332cf8b10a828689bc79cd7e1fcda0384405322f436f60001b6102d7565b60016000819055506101a87fcada4c59fdbb4aed7cfdf8450df1c1b7c1f0272d82c850ea1d1066ad7bb6982060001b6102d7565b6101d47f9e251f884fa9e6737652fd43fd44dc7f59dea85389a6832b844aa2803503029360001b6102d7565b3373ffffffffffffffffffffffffffffffffffffffff166359508f8f3085856040518463ffffffff1660e01b815260040161021193929190610407565b600060405180830381600087803b15801561022b57600080fd5b505af115801561023f573d6000803e3d6000fd5b50505050610275565b6102747fae70da97c0485f54202c4ce07b1354602375f1c7b0bac9bc4441548840974ca960001b6102d7565b5b6102a17fe3c230ff6fc26e88d18ef8a7018d8939b4d28e1a73c238a065f307038e16f4bb60001b6102d7565b6102cd7f77cdc3ec822481a6f986d13478944d332e01e16511d7f65fe893382444b5265b60001b6102d7565b6001905092915050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061030a826102df565b9050919050565b61031a816102ff565b811461032557600080fd5b50565b60008135905061033781610311565b92915050565b6000819050919050565b6103508161033d565b811461035b57600080fd5b50565b60008135905061036d81610347565b92915050565b6000806040838503121561038a576103896102da565b5b600061039885828601610328565b92505060206103a98582860161035e565b9150509250929050565b60008115159050919050565b6103c8816103b3565b82525050565b60006020820190506103e360008301846103bf565b92915050565b6103f2816102ff565b82525050565b6104018161033d565b82525050565b600060608201905061041c60008301866103e9565b61042960208301856103e9565b61043660408301846103f8565b94935050505056fea26469706673582212200467018256ee18611522eff350cd95ecf5b8e72c43b9d699b3e9da482231a5c864736f6c63430008090033";

type ERC20EvilUnlockMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20EvilUnlockMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20EvilUnlockMock__factory extends ContractFactory {
  constructor(...args: ERC20EvilUnlockMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20EvilUnlockMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20EvilUnlockMock> {
    return super.deploy(overrides || {}) as Promise<ERC20EvilUnlockMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20EvilUnlockMock {
    return super.attach(address) as ERC20EvilUnlockMock;
  }
  connect(signer: Signer): ERC20EvilUnlockMock__factory {
    return super.connect(signer) as ERC20EvilUnlockMock__factory;
  }
  static readonly contractName: "ERC20EvilUnlockMock";
  public readonly contractName: "ERC20EvilUnlockMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20EvilUnlockMockInterface {
    return new utils.Interface(_abi) as ERC20EvilUnlockMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20EvilUnlockMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20EvilUnlockMock;
  }
}
