/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20Mock, ERC20MockInterface } from "../ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "initialAccount",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "initialBalance",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approveInternal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferInternal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040516200233f3803806200233f83398181016040528101906200002991906200058a565b83838160039080519060200190620000439291906200029d565b5080600490805190602001906200005c9291906200029d565b505050620000937f676daf2ef444d7846ff4691bb13ef9d0aa512bee2b4fb50fee8a293ece549d1c60001b6200011760201b60201c565b620000c77fc4d29135ec006cdfeee9480acbdbf0be8df2350bd8904457621b5fe5ab8d6d7a60001b6200011760201b60201c565b620000fb7fed0bf469e27ac26b699032e43542745a5ecc2613db1a9574eba3131978098c9c60001b6200011760201b60201c565b6200010d82826200011a60201b60201c565b50505050620007dc565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200018d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000184906200069b565b60405180910390fd5b620001a1600083836200029360201b60201c565b8060026000828254620001b59190620006ec565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200020c9190620006ec565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200027391906200075a565b60405180910390a36200028f600083836200029860201b60201c565b5050565b505050565b505050565b828054620002ab90620007a6565b90600052602060002090601f016020900481019282620002cf57600085556200031b565b82601f10620002ea57805160ff19168380011785556200031b565b828001600101855582156200031b579182015b828111156200031a578251825591602001919060010190620002fd565b5b5090506200032a91906200032e565b5090565b5b80821115620003495760008160009055506001016200032f565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003b6826200036b565b810181811067ffffffffffffffff82111715620003d857620003d76200037c565b5b80604052505050565b6000620003ed6200034d565b9050620003fb8282620003ab565b919050565b600067ffffffffffffffff8211156200041e576200041d6200037c565b5b62000429826200036b565b9050602081019050919050565b60005b838110156200045657808201518184015260208101905062000439565b8381111562000466576000848401525b50505050565b6000620004836200047d8462000400565b620003e1565b905082815260208101848484011115620004a257620004a162000366565b5b620004af84828562000436565b509392505050565b600082601f830112620004cf57620004ce62000361565b5b8151620004e18482602086016200046c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200051782620004ea565b9050919050565b62000529816200050a565b81146200053557600080fd5b50565b60008151905062000549816200051e565b92915050565b6000819050919050565b62000564816200054f565b81146200057057600080fd5b50565b600081519050620005848162000559565b92915050565b60008060008060808587031215620005a757620005a662000357565b5b600085015167ffffffffffffffff811115620005c857620005c76200035c565b5b620005d687828801620004b7565b945050602085015167ffffffffffffffff811115620005fa57620005f96200035c565b5b6200060887828801620004b7565b93505060406200061b8782880162000538565b92505060606200062e8782880162000573565b91505092959194509250565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000683601f836200063a565b915062000690826200064b565b602082019050919050565b60006020820190508181036000830152620006b68162000674565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006f9826200054f565b915062000706836200054f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200073e576200073d620006bd565b5b828201905092915050565b62000754816200054f565b82525050565b600060208201905062000771600083018462000749565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007bf57607f821691505b60208210811415620007d657620007d562000777565b5b50919050565b611b5380620007ec6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac14610286578063a457c2d7146102a2578063a9059cbb146102d2578063dd62ed3e14610302576100f5565b806340c10f191461020057806356189cb41461021c57806370a082311461023857806395d89b4114610268576100f5565b8063222f5be0116100d3578063222f5be01461016657806323b872dd14610182578063313ce567146101b257806339509351146101d0576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610332565b60405161010f9190611249565b60405180910390f35b610132600480360381019061012d9190611304565b6103c4565b60405161013f919061135f565b60405180910390f35b6101506103e7565b60405161015d9190611389565b60405180910390f35b610180600480360381019061017b91906113a4565b6103f1565b005b61019c600480360381019061019791906113a4565b610484565b6040516101a9919061135f565b60405180910390f35b6101ba6104b3565b6040516101c79190611413565b60405180910390f35b6101ea60048036038101906101e59190611304565b6104bc565b6040516101f7919061135f565b60405180910390f35b61021a60048036038101906102159190611304565b610566565b005b610236600480360381019061023191906113a4565b6105f8565b005b610252600480360381019061024d919061142e565b61068c565b60405161025f9190611389565b60405180910390f35b6102706106d4565b60405161027d9190611249565b60405180910390f35b6102a0600480360381019061029b9190611304565b610766565b005b6102bc60048036038101906102b79190611304565b6107f8565b6040516102c9919061135f565b60405180910390f35b6102ec60048036038101906102e79190611304565b6108e2565b6040516102f9919061135f565b60405180910390f35b61031c6004803603810190610317919061145b565b610905565b6040516103299190611389565b60405180910390f35b606060038054610341906114ca565b80601f016020809104026020016040519081016040528092919081815260200182805461036d906114ca565b80156103ba5780601f1061038f576101008083540402835291602001916103ba565b820191906000526020600020905b81548152906001019060200180831161039d57829003601f168201915b5050505050905090565b6000806103cf61098c565b90506103dc818585610994565b600191505092915050565b6000600254905090565b61041c7e4295f44a84043d89df81e7df03d77187b31f8090c9d0b419998f6165029ef760001b610b5f565b6104487f702c583873735a87590eca14fca4f0fce4ffdf06e309dff75bbaf144498e182760001b610b5f565b6104747fd02fd780a9f36de55c186ddfaff472615b0217a95bbfe83df08448daf2a6a32160001b610b5f565b61047f838383610b62565b505050565b60008061048f61098c565b905061049c858285610de3565b6104a7858585610b62565b60019150509392505050565b60006012905090565b6000806104c761098c565b905061055b818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610556919061152b565b610994565b600191505092915050565b6105927f6b6adf9e44b6fafc368dd66640c133be62de13cd2fa88068148271e58306317260001b610b5f565b6105be7f363a2a93e68026c0b2b4277fedd8ec3845d1e4676f9151a023170ee47e39153760001b610b5f565b6105ea7f0dead01ca1e2a2eb7ee43cfaabe5a9762785dc76723f6b8a82a52639486100f560001b610b5f565b6105f48282610e6f565b5050565b6106247f51e800cd5c8d948b36f84074190349f265acc294a824c09b9ee9f4eeb32ea64560001b610b5f565b6106507f7b3756057671484a501d485b2d1afcabea4462d0ecdfdc3518dee559b4ed2c1160001b610b5f565b61067c7f2687b91d791ca5aa9eac7e74b0c9660483100e2aa3fca3d7cf03642b690673d060001b610b5f565b610687838383610994565b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546106e3906114ca565b80601f016020809104026020016040519081016040528092919081815260200182805461070f906114ca565b801561075c5780601f106107315761010080835404028352916020019161075c565b820191906000526020600020905b81548152906001019060200180831161073f57829003601f168201915b5050505050905090565b6107927f9da14b629f51b69fcec6f5374bb56c837e512f5e2554ae306ec2f0c7eed27cdf60001b610b5f565b6107be7fd4c1c8e6fa11c92cbb90b035da5f94b3a1359bb3ac7dd9e33874b300cefc7e6660001b610b5f565b6107ea7f28600e8a7c80f6fb373873f5d046680df4cdfaea05d9342de76b7caf71cbaa9c60001b610b5f565b6107f48282610fcf565b5050565b60008061080361098c565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c0906115f3565b60405180910390fd5b6108d68286868403610994565b60019250505092915050565b6000806108ed61098c565b90506108fa818585610b62565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90611685565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6b90611717565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610b529190611389565b60405180910390a3505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc9906117a9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c399061183b565b60405180910390fd5b610c4d8383836111a6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cca906118cd565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d66919061152b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610dca9190611389565b60405180910390a3610ddd8484846111ab565b50505050565b6000610def8484610905565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e695781811015610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290611939565b60405180910390fd5b610e688484848403610994565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed6906119a5565b60405180910390fd5b610eeb600083836111a6565b8060026000828254610efd919061152b565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f52919061152b565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fb79190611389565b60405180910390a3610fcb600083836111ab565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103690611a37565b60405180910390fd5b61104b826000836111a6565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c890611ac9565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546111289190611ae9565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161118d9190611389565b60405180910390a36111a1836000846111ab565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111ea5780820151818401526020810190506111cf565b838111156111f9576000848401525b50505050565b6000601f19601f8301169050919050565b600061121b826111b0565b61122581856111bb565b93506112358185602086016111cc565b61123e816111ff565b840191505092915050565b600060208201905081810360008301526112638184611210565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061129b82611270565b9050919050565b6112ab81611290565b81146112b657600080fd5b50565b6000813590506112c8816112a2565b92915050565b6000819050919050565b6112e1816112ce565b81146112ec57600080fd5b50565b6000813590506112fe816112d8565b92915050565b6000806040838503121561131b5761131a61126b565b5b6000611329858286016112b9565b925050602061133a858286016112ef565b9150509250929050565b60008115159050919050565b61135981611344565b82525050565b60006020820190506113746000830184611350565b92915050565b611383816112ce565b82525050565b600060208201905061139e600083018461137a565b92915050565b6000806000606084860312156113bd576113bc61126b565b5b60006113cb868287016112b9565b93505060206113dc868287016112b9565b92505060406113ed868287016112ef565b9150509250925092565b600060ff82169050919050565b61140d816113f7565b82525050565b60006020820190506114286000830184611404565b92915050565b6000602082840312156114445761144361126b565b5b6000611452848285016112b9565b91505092915050565b600080604083850312156114725761147161126b565b5b6000611480858286016112b9565b9250506020611491858286016112b9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806114e257607f821691505b602082108114156114f6576114f561149b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611536826112ce565b9150611541836112ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611576576115756114fc565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006115dd6025836111bb565b91506115e882611581565b604082019050919050565b6000602082019050818103600083015261160c816115d0565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061166f6024836111bb565b915061167a82611613565b604082019050919050565b6000602082019050818103600083015261169e81611662565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006117016022836111bb565b915061170c826116a5565b604082019050919050565b60006020820190508181036000830152611730816116f4565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006117936025836111bb565b915061179e82611737565b604082019050919050565b600060208201905081810360008301526117c281611786565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006118256023836111bb565b9150611830826117c9565b604082019050919050565b6000602082019050818103600083015261185481611818565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006118b76026836111bb565b91506118c28261185b565b604082019050919050565b600060208201905081810360008301526118e6816118aa565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611923601d836111bb565b915061192e826118ed565b602082019050919050565b6000602082019050818103600083015261195281611916565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061198f601f836111bb565b915061199a82611959565b602082019050919050565b600060208201905081810360008301526119be81611982565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611a216021836111bb565b9150611a2c826119c5565b604082019050919050565b60006020820190508181036000830152611a5081611a14565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ab36022836111bb565b9150611abe82611a57565b604082019050919050565b60006020820190508181036000830152611ae281611aa6565b9050919050565b6000611af4826112ce565b9150611aff836112ce565b925082821015611b1257611b116114fc565b5b82820390509291505056fea2646970667358221220fe64d285b95a80b5afa77fee3575f03d516b265c94f82c5c402d9dcf558e904164736f6c63430008090033";

type ERC20MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mock__factory extends ContractFactory {
  constructor(...args: ERC20MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20Mock";
  }

  deploy(
    name: string,
    symbol: string,
    initialAccount: string,
    initialBalance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(
      name,
      symbol,
      initialAccount,
      initialBalance,
      overrides || {}
    ) as Promise<ERC20Mock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    initialAccount: string,
    initialBalance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      initialAccount,
      initialBalance,
      overrides || {}
    );
  }
  attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }
  static readonly contractName: "ERC20Mock";
  public readonly contractName: "ERC20Mock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
