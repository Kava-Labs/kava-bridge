/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bridge, BridgeInterface } from "../Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toKavaAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockSequence",
        type: "uint256",
      },
    ],
    name: "Lock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unlockSequence",
        type: "uint256",
      },
    ],
    name: "Unlock",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "toKavaAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockSequence",
        type: "uint256",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e3d380380610e3d833981810160405281019061003291906100ee565b60006001600081905550806001819055505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100bb82610090565b9050919050565b6100cb816100b0565b81146100d657600080fd5b50565b6000815190506100e8816100c2565b92915050565b6000602082840312156101045761010361008b565b5b6000610112848285016100d9565b91505092915050565b610d138061012a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634202e907146100465780637750c9f0146100625780638406c0791461007e575b600080fd5b610060600480360381019061005b919061077b565b61009c565b005b61007c600480360381019061007791906107e2565b6101d4565b005b6100866102a3565b6040516100939190610844565b60405180910390f35b6100a46102cd565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012b906108bc565b60405180910390fd5b61015f83838673ffffffffffffffffffffffffffffffffffffffff1661031d9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc1640cf787ea538af4a68163da63c6da8b4577194278080f5b040a75df00389984846040516101be9291906108eb565b60405180910390a36101ce6103a3565b50505050565b6101dc6102cd565b6101e46103ad565b6102113330838673ffffffffffffffffffffffffffffffffffffffff166103ba909392919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f749e347e95185169edffb86e003abcbf08f3510641663b00600acf707f098f4784610280610443565b60405161028e9291906108eb565b60405180910390a461029e6103a3565b505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026000541415610313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030a90610960565b60405180910390fd5b6002600081905550565b61039e8363a9059cbb60e01b848460405160240161033c929190610980565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061044d565b505050565b6001600081905550565b6001805401600181905550565b61043d846323b872dd60e01b8585856040516024016103db939291906109a9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061044d565b50505050565b6000600154905090565b60006104af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166105149092919063ffffffff16565b905060008151111561050f57808060200190518101906104cf9190610a18565b61050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610ab7565b60405180910390fd5b5b505050565b6060610523848460008561052c565b90509392505050565b606082471015610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056890610b49565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161059a9190610be3565b60006040518083038185875af1925050503d80600081146105d7576040519150601f19603f3d011682016040523d82523d6000602084013e6105dc565b606091505b50915091506105ed878383876105f9565b92505050949350505050565b6060831561065c57600083511415610654576106148561066f565b610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a90610c46565b60405180910390fd5b5b829050610667565b6106668383610692565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156106a55781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d99190610cbb565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610712826106e7565b9050919050565b61072281610707565b811461072d57600080fd5b50565b60008135905061073f81610719565b92915050565b6000819050919050565b61075881610745565b811461076357600080fd5b50565b6000813590506107758161074f565b92915050565b60008060008060808587031215610795576107946106e2565b5b60006107a387828801610730565b94505060206107b487828801610730565b93505060406107c587828801610766565b92505060606107d687828801610766565b91505092959194509250565b6000806000606084860312156107fb576107fa6106e2565b5b600061080986828701610730565b935050602061081a86828701610730565b925050604061082b86828701610766565b9150509250925092565b61083e81610707565b82525050565b60006020820190506108596000830184610835565b92915050565b600082825260208201905092915050565b7f4272696467653a20756e74727573746564206164647265737300000000000000600082015250565b60006108a660198361085f565b91506108b182610870565b602082019050919050565b600060208201905081810360008301526108d581610899565b9050919050565b6108e581610745565b82525050565b600060408201905061090060008301856108dc565b61090d60208301846108dc565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061094a601f8361085f565b915061095582610914565b602082019050919050565b600060208201905081810360008301526109798161093d565b9050919050565b60006040820190506109956000830185610835565b6109a260208301846108dc565b9392505050565b60006060820190506109be6000830186610835565b6109cb6020830185610835565b6109d860408301846108dc565b949350505050565b60008115159050919050565b6109f5816109e0565b8114610a0057600080fd5b50565b600081519050610a12816109ec565b92915050565b600060208284031215610a2e57610a2d6106e2565b5b6000610a3c84828501610a03565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610aa1602a8361085f565b9150610aac82610a45565b604082019050919050565b60006020820190508181036000830152610ad081610a94565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610b3360268361085f565b9150610b3e82610ad7565b604082019050919050565b60006020820190508181036000830152610b6281610b26565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610b9d578082015181840152602081019050610b82565b83811115610bac576000848401525b50505050565b6000610bbd82610b69565b610bc78185610b74565b9350610bd7818560208601610b7f565b80840191505092915050565b6000610bef8284610bb2565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610c30601d8361085f565b9150610c3b82610bfa565b602082019050919050565b60006020820190508181036000830152610c5f81610c23565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000610c8d82610c66565b610c97818561085f565b9350610ca7818560208601610b7f565b610cb081610c71565b840191505092915050565b60006020820190508181036000830152610cd58184610c82565b90509291505056fea2646970667358221220595bf1459fba6826ba5e1a887031172f904c21a933fa2d5132e8e4eb1a9bb9cb64736f6c63430008090033";

type BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bridge__factory extends ContractFactory {
  constructor(...args: BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Bridge";
  }

  deploy(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bridge> {
    return super.deploy(relayer_, overrides || {}) as Promise<Bridge>;
  }
  getDeployTransaction(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(relayer_, overrides || {});
  }
  attach(address: string): Bridge {
    return super.attach(address) as Bridge;
  }
  connect(signer: Signer): Bridge__factory {
    return super.connect(signer) as Bridge__factory;
  }
  static readonly contractName: "Bridge";
  public readonly contractName: "Bridge";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeInterface {
    return new utils.Interface(_abi) as BridgeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bridge {
    return new Contract(address, _abi, signerOrProvider) as Bridge;
  }
}
