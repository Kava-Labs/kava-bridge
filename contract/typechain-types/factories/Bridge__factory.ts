/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bridge, BridgeInterface } from "../Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toKavaAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lockSequence",
        type: "uint256",
      },
    ],
    name: "Lock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "unlockSequence",
        type: "uint256",
      },
    ],
    name: "Unlock",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "toKavaAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockSequence",
        type: "uint256",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e57380380610e57833981810160405281019061003291906100ee565b60006001600081905550806001819055505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100bb82610090565b9050919050565b6100cb816100b0565b81146100d657600080fd5b50565b6000815190506100e8816100c2565b92915050565b6000602082840312156101045761010361008b565b5b6000610112848285016100d9565b91505092915050565b610d2d8061012a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634202e907146100465780637750c9f0146100625780638406c0791461007e575b600080fd5b610060600480360381019061005b9190610795565b61009c565b005b61007c600480360381019061007791906107fc565b61021a565b005b61008661032f565b604051610093919061085e565b60405180910390f35b600260005414156100e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d9906108d6565b60405180910390fd5b6002600081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017190610942565b60405180910390fd5b6101a583838673ffffffffffffffffffffffffffffffffffffffff166103599092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc1640cf787ea538af4a68163da63c6da8b4577194278080f5b040a75df0038998484604051610204929190610971565b60405180910390a3600160008190555050505050565b60026000541415610260576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610257906108d6565b60405180910390fd5b60026000819055506102706103df565b61029d3330838673ffffffffffffffffffffffffffffffffffffffff166103ec909392919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f749e347e95185169edffb86e003abcbf08f3510641663b00600acf707f098f478461030c610475565b60405161031a929190610971565b60405180910390a46001600081905550505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103da8363a9059cbb60e01b848460405160240161037892919061099a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061047f565b505050565b6001805401600181905550565b61046f846323b872dd60e01b85858560405160240161040d939291906109c3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061047f565b50505050565b6000600154905090565b60006104e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166105469092919063ffffffff16565b905060008151111561054157808060200190518101906105019190610a32565b610540576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053790610ad1565b60405180910390fd5b5b505050565b6060610555848460008561055e565b90509392505050565b6060824710156105a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059a90610b63565b60405180910390fd5b6105ac85610672565b6105eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e290610bcf565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516106149190610c69565b60006040518083038185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5091509150610666828286610695565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156106a5578290506106f5565b6000835111156106b85782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec9190610cd5565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061072c82610701565b9050919050565b61073c81610721565b811461074757600080fd5b50565b60008135905061075981610733565b92915050565b6000819050919050565b6107728161075f565b811461077d57600080fd5b50565b60008135905061078f81610769565b92915050565b600080600080608085870312156107af576107ae6106fc565b5b60006107bd8782880161074a565b94505060206107ce8782880161074a565b93505060406107df87828801610780565b92505060606107f087828801610780565b91505092959194509250565b600080600060608486031215610815576108146106fc565b5b60006108238682870161074a565b93505060206108348682870161074a565b925050604061084586828701610780565b9150509250925092565b61085881610721565b82525050565b6000602082019050610873600083018461084f565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006108c0601f83610879565b91506108cb8261088a565b602082019050919050565b600060208201905081810360008301526108ef816108b3565b9050919050565b7f4272696467653a20756e74727573746564206164647265737300000000000000600082015250565b600061092c601983610879565b9150610937826108f6565b602082019050919050565b6000602082019050818103600083015261095b8161091f565b9050919050565b61096b8161075f565b82525050565b60006040820190506109866000830185610962565b6109936020830184610962565b9392505050565b60006040820190506109af600083018561084f565b6109bc6020830184610962565b9392505050565b60006060820190506109d8600083018661084f565b6109e5602083018561084f565b6109f26040830184610962565b949350505050565b60008115159050919050565b610a0f816109fa565b8114610a1a57600080fd5b50565b600081519050610a2c81610a06565b92915050565b600060208284031215610a4857610a476106fc565b5b6000610a5684828501610a1d565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610abb602a83610879565b9150610ac682610a5f565b604082019050919050565b60006020820190508181036000830152610aea81610aae565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610b4d602683610879565b9150610b5882610af1565b604082019050919050565b60006020820190508181036000830152610b7c81610b40565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610bb9601d83610879565b9150610bc482610b83565b602082019050919050565b60006020820190508181036000830152610be881610bac565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610c23578082015181840152602081019050610c08565b83811115610c32576000848401525b50505050565b6000610c4382610bef565b610c4d8185610bfa565b9350610c5d818560208601610c05565b80840191505092915050565b6000610c758284610c38565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000610ca782610c80565b610cb18185610879565b9350610cc1818560208601610c05565b610cca81610c8b565b840191505092915050565b60006020820190508181036000830152610cef8184610c9c565b90509291505056fea26469706673582212204018c8ef8f8e2edfc22df1524e45effadf438779e9f4200cc8ebb19c23b0c7bb64736f6c63430008090033";

type BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bridge__factory extends ContractFactory {
  constructor(...args: BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Bridge";
  }

  deploy(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bridge> {
    return super.deploy(relayer_, overrides || {}) as Promise<Bridge>;
  }
  getDeployTransaction(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(relayer_, overrides || {});
  }
  attach(address: string): Bridge {
    return super.attach(address) as Bridge;
  }
  connect(signer: Signer): Bridge__factory {
    return super.connect(signer) as Bridge__factory;
  }
  static readonly contractName: "Bridge";
  public readonly contractName: "Bridge";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeInterface {
    return new utils.Interface(_abi) as BridgeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bridge {
    return new Contract(address, _abi, signerOrProvider) as Bridge;
  }
}
