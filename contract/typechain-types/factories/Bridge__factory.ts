/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bridge, BridgeInterface } from "../Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "toAddr",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sequence",
        type: "uint256",
      },
    ],
    name: "Lock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sequence",
        type: "uint256",
      },
    ],
    name: "Unlock",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "toAddr",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200144038038062001440833981810160405281019062000037919062000239565b60006001600081905550620000757f0e7452f489753063f100160bee29fe12496f2e1569fd074a56108cbfc325005560001b620001c960201b60201c565b620000a97f7b907cd94ef74e0e4b5371400185799c6cfc94ff4203fd009f6801ed7741595c60001b620001c960201b60201c565b620000dd7ffe08be7fed07b6f354dcc271e8a7b171d74b256fd2bf5b7599f56d219183ab6c60001b620001c960201b60201c565b8060018190555050620001197f029b112dee790dc71f8164d6d8865774ea986491fafb280f4dfc2971b7335a2c60001b620001cc60201b60201c565b6200014d7fa3373f0eada0a13d67186f60a2901be84967bbd69735db78424120f06eea772060001b620001cc60201b60201c565b620001817fde64462d4d7d5efb910c75b6210c57056c7000b68ab826fa842b23ce9c9e455760001b620001cc60201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200026b565b50565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020182620001d4565b9050919050565b6200021381620001f4565b81146200021f57600080fd5b50565b600081519050620002338162000208565b92915050565b600060208284031215620002525762000251620001cf565b5b6000620002628482850162000222565b91505092915050565b6111c5806200027b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806359508f8f146100465780638406c07914610062578063a80de0e814610080575b600080fd5b610060600480360381019061005b9190610c0b565b61009c565b005b61006a61040c565b6040516100779190610c6d565b60405180910390f35b61009a60048036038101906100959190610cbe565b6104ba565b005b600260005414156100e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d990610d6e565b60405180910390fd5b60026000819055506101167f6d590ced0ea3b5d2bf077776d7782e7ca9e3ed58416e47a4b83d4bc1f0674ae060001b6106ed565b6101427f8738f2538db400214bc999ba8fd5e9dbc2a9d07f5820d8dc2407658ab417995d60001b6106ed565b61016e7fcea84153626e4d3f04c44617ea8a2310fb7752d9695e2bf2bcaa9792ac62e2f160001b6106ed565b61019a7f880d0dab9e23def9c01249a2c0f88b3fb387808ae6c353dafcccb77c0198baee60001b6106ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022190610dda565b60405180910390fd5b6102567f5a90b144086b42e5291359b634b6158cddf62d33c222a42fec001f4eb9a6662760001b6106ed565b6102827ff32d8b6689206f3631e1b9a367a7ed2ebf381020354b67024551dbd6e3cede2d60001b6106ed565b6102ae7f3115eb0771d6a94c953edafeca99ba1b8ecb4c7b2e3cb32ba960d95979f57fed60001b6106ed565b6102b66106f0565b6102e27ff8264bad39654750ed649de9c699e75dfc033653eb38284b852b0d09ced02dbf60001b6106ed565b61030e7f874f03ef2b864ea8c904afb964fadec174dd9dddc53bf752aa9cb2faa07dc17b60001b6106ed565b61033982828573ffffffffffffffffffffffffffffffffffffffff166107559092919063ffffffff16565b6103657f1948b110ca6498b74330cd269a3adf70a80b8d339996caacb2ce5415ea7bec2360001b6106ed565b6103917f37d23268d7ff756ef7b5f28fcfacb847e1016d388b36858e9872768c0145e9b260001b6106ed565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc1640cf787ea538af4a68163da63c6da8b4577194278080f5b040a75df003899836103e96107db565b6040516103f7929190610e09565b60405180910390a36001600081905550505050565b600061043a7f430155476e55ae6fed496eda0b97f13ae00b5564d7aeb1142628580eca06977d60001b6106ed565b6104667fb38e40201fae00c85198b71edf8c12c3d1a8e4bd78b227ab49bad5bb81e9f32460001b6106ed565b6104927f7cbd9c1b6458f83a0c536305e67ea2203707f2b40d130fcf1f4a470c6f09dcd660001b6106ed565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026000541415610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610d6e565b60405180910390fd5b60026000819055506105347fe90801a62791f2d72b99cefcab2d5c7981e3c96b36d9fef840bef209db95788460001b6106ed565b6105607ff5b6a5942b4571fe42232ac1597e811c8d313a8ad3e6ad60c443287cdabdba0960001b6106ed565b61058c7ff3f99ff75d22b2346d4388d886793791a5cccd470d4ab06fdb53b7b3a4afad7860001b6106ed565b6105946106f0565b6105c07f8c8fb6d670cad30151947944414076468a74c0be281987a78897ae4fd58a8b9f60001b6106ed565b6105ec7f0b7aaf62f695dac31c32d7b979072e21b6d3a6a47d9f2a83b09f176f2b38239060001b6106ed565b6106193330838673ffffffffffffffffffffffffffffffffffffffff16610869909392919063ffffffff16565b6106457f1626c908e61d76824dc2d21c22d7c2eeaf1bf68924975ca99fedb31741c8b40560001b6106ed565b6106717f46a649f7a16f50fbfb07c0fb7c793cd025299ae1e4bebfe040946f98db92076160001b6106ed565b813373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f04751865a034480d02848e192ee5d6a2b5fe77e3440602cc36a28ff559978c6e846106ca6107db565b6040516106d8929190610e09565b60405180910390a46001600081905550505050565b50565b61071c7f70bbb4e5ca07e5543daf8e3496c4ef4496e8440cba38fd44bd968ce665c5a21a60001b6108f2565b6107487fd1478e127ca548edc122f109a68d3ca6928f506b5160afe9a3d37a22033f13d460001b6108f2565b6001805401600181905550565b6107d68363a9059cbb60e01b8484604051602401610774929190610e32565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f5565b505050565b60006108097f6c6d68c4f45959249e9685493d74502f6fadb21e89e4367052edc73d46e678df60001b6108f2565b6108357f363dd52fb8adcec8594c26feb17478f6bd72157f93f91c425fcc36287aafaac960001b6108f2565b6108617fd426b2e7f4fda8fefd742a68199f2e0de79aaffd9c6209dd3f39cdc096323b2c60001b6108f2565b600154905090565b6108ec846323b872dd60e01b85858560405160240161088a93929190610e5b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108f5565b50505050565b50565b6000610957826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109bc9092919063ffffffff16565b90506000815111156109b757808060200190518101906109779190610eca565b6109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad90610f69565b60405180910390fd5b5b505050565b60606109cb84846000856109d4565b90509392505050565b606082471015610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090610ffb565b60405180910390fd5b610a2285610ae8565b610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5890611067565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a8a9190611101565b60006040518083038185875af1925050503d8060008114610ac7576040519150601f19603f3d011682016040523d82523d6000602084013e610acc565b606091505b5091509150610adc828286610b0b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315610b1b57829050610b6b565b600083511115610b2e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b62919061116d565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ba282610b77565b9050919050565b610bb281610b97565b8114610bbd57600080fd5b50565b600081359050610bcf81610ba9565b92915050565b6000819050919050565b610be881610bd5565b8114610bf357600080fd5b50565b600081359050610c0581610bdf565b92915050565b600080600060608486031215610c2457610c23610b72565b5b6000610c3286828701610bc0565b9350506020610c4386828701610bc0565b9250506040610c5486828701610bf6565b9150509250925092565b610c6781610b97565b82525050565b6000602082019050610c826000830184610c5e565b92915050565b6000819050919050565b610c9b81610c88565b8114610ca657600080fd5b50565b600081359050610cb881610c92565b92915050565b600080600060608486031215610cd757610cd6610b72565b5b6000610ce586828701610bc0565b9350506020610cf686828701610ca9565b9250506040610d0786828701610bf6565b9150509250925092565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610d58601f83610d11565b9150610d6382610d22565b602082019050919050565b60006020820190508181036000830152610d8781610d4b565b9050919050565b7f4272696467653a20756e74727573746564206164647265737300000000000000600082015250565b6000610dc4601983610d11565b9150610dcf82610d8e565b602082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b610e0381610bd5565b82525050565b6000604082019050610e1e6000830185610dfa565b610e2b6020830184610dfa565b9392505050565b6000604082019050610e476000830185610c5e565b610e546020830184610dfa565b9392505050565b6000606082019050610e706000830186610c5e565b610e7d6020830185610c5e565b610e8a6040830184610dfa565b949350505050565b60008115159050919050565b610ea781610e92565b8114610eb257600080fd5b50565b600081519050610ec481610e9e565b92915050565b600060208284031215610ee057610edf610b72565b5b6000610eee84828501610eb5565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610f53602a83610d11565b9150610f5e82610ef7565b604082019050919050565b60006020820190508181036000830152610f8281610f46565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610fe5602683610d11565b9150610ff082610f89565b604082019050919050565b6000602082019050818103600083015261101481610fd8565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611051601d83610d11565b915061105c8261101b565b602082019050919050565b6000602082019050818103600083015261108081611044565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156110bb5780820151818401526020810190506110a0565b838111156110ca576000848401525b50505050565b60006110db82611087565b6110e58185611092565b93506110f581856020860161109d565b80840191505092915050565b600061110d82846110d0565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061113f82611118565b6111498185610d11565b935061115981856020860161109d565b61116281611123565b840191505092915050565b600060208201905081810360008301526111878184611134565b90509291505056fea264697066735822122068ac53ec685a78fab8eb302b81c7c5face8e3fa7f10f4f9792c44fabc120198b64736f6c63430008090033";

type BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bridge__factory extends ContractFactory {
  constructor(...args: BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Bridge";
  }

  deploy(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bridge> {
    return super.deploy(relayer_, overrides || {}) as Promise<Bridge>;
  }
  getDeployTransaction(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(relayer_, overrides || {});
  }
  attach(address: string): Bridge {
    return super.attach(address) as Bridge;
  }
  connect(signer: Signer): Bridge__factory {
    return super.connect(signer) as Bridge__factory;
  }
  static readonly contractName: "Bridge";
  public readonly contractName: "Bridge";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeInterface {
    return new utils.Interface(_abi) as BridgeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bridge {
    return new Contract(address, _abi, signerOrProvider) as Bridge;
  }
}
