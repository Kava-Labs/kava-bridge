/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bridge, BridgeInterface } from "../Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "toAddr",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sequence",
        type: "uint256",
      },
    ],
    name: "Lock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sequence",
        type: "uint256",
      },
    ],
    name: "Unlock",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "toAddr",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e71380380610e71833981810160405281019061003291906100ee565b60006001600081905550806001819055505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100bb82610090565b9050919050565b6100cb816100b0565b81146100d657600080fd5b50565b6000815190506100e8816100c2565b92915050565b6000602082840312156101045761010361008b565b5b6000610112848285016100d9565b91505092915050565b610d478061012a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806359508f8f146100465780638406c07914610062578063a80de0e814610080575b600080fd5b610060600480360381019061005b919061078d565b61009c565b005b61006a610228565b60405161007791906107ef565b60405180910390f35b61009a60048036038101906100959190610840565b610252565b005b600260005414156100e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d9906108f0565b60405180910390fd5b6002600081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101719061095c565b60405180910390fd5b610182610351565b6101ad82828573ffffffffffffffffffffffffffffffffffffffff1661035e9092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc1640cf787ea538af4a68163da63c6da8b4577194278080f5b040a75df003899836102056103e4565b60405161021392919061098b565b60405180910390a36001600081905550505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026000541415610298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028f906108f0565b60405180910390fd5b60026000819055506102a8610351565b6102d53330838673ffffffffffffffffffffffffffffffffffffffff166103ee909392919063ffffffff16565b813373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f04751865a034480d02848e192ee5d6a2b5fe77e3440602cc36a28ff559978c6e8461032e6103e4565b60405161033c92919061098b565b60405180910390a46001600081905550505050565b6001805401600181905550565b6103df8363a9059cbb60e01b848460405160240161037d9291906109b4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610477565b505050565b6000600154905090565b610471846323b872dd60e01b85858560405160240161040f939291906109dd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610477565b50505050565b60006104d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661053e9092919063ffffffff16565b905060008151111561053957808060200190518101906104f99190610a4c565b610538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052f90610aeb565b60405180910390fd5b5b505050565b606061054d8484600085610556565b90509392505050565b60608247101561059b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059290610b7d565b60405180910390fd5b6105a48561066a565b6105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da90610be9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161060c9190610c83565b60006040518083038185875af1925050503d8060008114610649576040519150601f19603f3d011682016040523d82523d6000602084013e61064e565b606091505b509150915061065e82828661068d565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561069d578290506106ed565b6000835111156106b05782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e49190610cef565b60405180910390fd5b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610724826106f9565b9050919050565b61073481610719565b811461073f57600080fd5b50565b6000813590506107518161072b565b92915050565b6000819050919050565b61076a81610757565b811461077557600080fd5b50565b60008135905061078781610761565b92915050565b6000806000606084860312156107a6576107a56106f4565b5b60006107b486828701610742565b93505060206107c586828701610742565b92505060406107d686828701610778565b9150509250925092565b6107e981610719565b82525050565b600060208201905061080460008301846107e0565b92915050565b6000819050919050565b61081d8161080a565b811461082857600080fd5b50565b60008135905061083a81610814565b92915050565b600080600060608486031215610859576108586106f4565b5b600061086786828701610742565b93505060206108788682870161082b565b925050604061088986828701610778565b9150509250925092565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006108da601f83610893565b91506108e5826108a4565b602082019050919050565b60006020820190508181036000830152610909816108cd565b9050919050565b7f4272696467653a20756e74727573746564206164647265737300000000000000600082015250565b6000610946601983610893565b915061095182610910565b602082019050919050565b6000602082019050818103600083015261097581610939565b9050919050565b61098581610757565b82525050565b60006040820190506109a0600083018561097c565b6109ad602083018461097c565b9392505050565b60006040820190506109c960008301856107e0565b6109d6602083018461097c565b9392505050565b60006060820190506109f260008301866107e0565b6109ff60208301856107e0565b610a0c604083018461097c565b949350505050565b60008115159050919050565b610a2981610a14565b8114610a3457600080fd5b50565b600081519050610a4681610a20565b92915050565b600060208284031215610a6257610a616106f4565b5b6000610a7084828501610a37565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610ad5602a83610893565b9150610ae082610a79565b604082019050919050565b60006020820190508181036000830152610b0481610ac8565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610b67602683610893565b9150610b7282610b0b565b604082019050919050565b60006020820190508181036000830152610b9681610b5a565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610bd3601d83610893565b9150610bde82610b9d565b602082019050919050565b60006020820190508181036000830152610c0281610bc6565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610c3d578082015181840152602081019050610c22565b83811115610c4c576000848401525b50505050565b6000610c5d82610c09565b610c678185610c14565b9350610c77818560208601610c1f565b80840191505092915050565b6000610c8f8284610c52565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000610cc182610c9a565b610ccb8185610893565b9350610cdb818560208601610c1f565b610ce481610ca5565b840191505092915050565b60006020820190508181036000830152610d098184610cb6565b90509291505056fea264697066735822122085f5bdfc49d1dc7f2207074e59a9960dbc90f6ab3b411adab18f5d25e20bfe2364736f6c63430008090033";

type BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bridge__factory extends ContractFactory {
  constructor(...args: BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Bridge";
  }

  deploy(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bridge> {
    return super.deploy(relayer_, overrides || {}) as Promise<Bridge>;
  }
  getDeployTransaction(
    relayer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(relayer_, overrides || {});
  }
  attach(address: string): Bridge {
    return super.attach(address) as Bridge;
  }
  connect(signer: Signer): Bridge__factory {
    return super.connect(signer) as Bridge__factory;
  }
  static readonly contractName: "Bridge";
  public readonly contractName: "Bridge";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeInterface {
    return new utils.Interface(_abi) as BridgeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bridge {
    return new Contract(address, _abi, signerOrProvider) as Bridge;
  }
}
