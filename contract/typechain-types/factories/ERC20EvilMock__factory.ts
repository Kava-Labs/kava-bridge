/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20EvilMock, ERC20EvilMockInterface } from "../ERC20EvilMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "toAddr",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "attackLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506000808190555061060f806100276000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806323b872dd14610046578063a7c67c6314610076578063a9059cbb14610092575b600080fd5b610060600480360381019061005b9190610314565b6100c2565b60405161006d9190610382565b60405180910390f35b610090600480360381019061008b91906103d3565b610161565b005b6100ac60048036038101906100a79190610426565b6101dc565b6040516100b99190610382565b60405180910390f35b6000600360005410156101565760016000546100de9190610495565b6000819055503373ffffffffffffffffffffffffffffffffffffffff1663a80de0e830600154856040518463ffffffff1660e01b815260040161012393929190610518565b600060405180830381600087803b15801561013d57600080fd5b505af1158015610151573d6000803e3d6000fd5b505050505b600190509392505050565b816001819055508273ffffffffffffffffffffffffffffffffffffffff1663a80de0e83084846040518463ffffffff1660e01b81526004016101a593929190610518565b600060405180830381600087803b1580156101bf57600080fd5b505af11580156101d3573d6000803e3d6000fd5b50505050505050565b6000600360005410156102715760016000546101f89190610495565b6000819055503373ffffffffffffffffffffffffffffffffffffffff16634202e90730858560016040518563ffffffff1660e01b815260040161023e9493929190610594565b600060405180830381600087803b15801561025857600080fd5b505af115801561026c573d6000803e3d6000fd5b505050505b6001905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ab82610280565b9050919050565b6102bb816102a0565b81146102c657600080fd5b50565b6000813590506102d8816102b2565b92915050565b6000819050919050565b6102f1816102de565b81146102fc57600080fd5b50565b60008135905061030e816102e8565b92915050565b60008060006060848603121561032d5761032c61027b565b5b600061033b868287016102c9565b935050602061034c868287016102c9565b925050604061035d868287016102ff565b9150509250925092565b60008115159050919050565b61037c81610367565b82525050565b60006020820190506103976000830184610373565b92915050565b6000819050919050565b6103b08161039d565b81146103bb57600080fd5b50565b6000813590506103cd816103a7565b92915050565b6000806000606084860312156103ec576103eb61027b565b5b60006103fa868287016102c9565b935050602061040b868287016103be565b925050604061041c868287016102ff565b9150509250925092565b6000806040838503121561043d5761043c61027b565b5b600061044b858286016102c9565b925050602061045c858286016102ff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104a0826102de565b91506104ab836102de565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156104e0576104df610466565b5b828201905092915050565b6104f4816102a0565b82525050565b6105038161039d565b82525050565b610512816102de565b82525050565b600060608201905061052d60008301866104eb565b61053a60208301856104fa565b6105476040830184610509565b949350505050565b6000819050919050565b6000819050919050565b600061057e6105796105748461054f565b610559565b6102de565b9050919050565b61058e81610563565b82525050565b60006080820190506105a960008301876104eb565b6105b660208301866104eb565b6105c36040830185610509565b6105d06060830184610585565b9594505050505056fea2646970667358221220cb13f9a93b53ee1fcae4d2837128dad3712fbc953aec519445772ed5fd44fce664736f6c63430008090033";

type ERC20EvilMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20EvilMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20EvilMock__factory extends ContractFactory {
  constructor(...args: ERC20EvilMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20EvilMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20EvilMock> {
    return super.deploy(overrides || {}) as Promise<ERC20EvilMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20EvilMock {
    return super.attach(address) as ERC20EvilMock;
  }
  connect(signer: Signer): ERC20EvilMock__factory {
    return super.connect(signer) as ERC20EvilMock__factory;
  }
  static readonly contractName: "ERC20EvilMock";
  public readonly contractName: "ERC20EvilMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20EvilMockInterface {
    return new utils.Interface(_abi) as ERC20EvilMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20EvilMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20EvilMock;
  }
}
