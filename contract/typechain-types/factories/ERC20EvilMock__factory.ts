/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20EvilMock, ERC20EvilMockInterface } from "../ERC20EvilMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "toAddr",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "attackLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506100437f55ae476c309a34e0ac9a357839f39d6c871399fb856bc01f4cbc76cccbfae46460001b6100b360201b60201c565b6100757fbacfc10e112011f395338cdb704e786f8bd39017af978c9bcfc8f3c1a13302c360001b6100b360201b60201c565b6100a77f56fd874e351f730acb273e0b37be3252cebe3237b1098e187fa0e202e60e1b7f60001b6100b360201b60201c565b600080819055506100b6565b50565b610a6a806100c56000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806323b872dd14610046578063a7c67c6314610076578063a9059cbb14610092575b600080fd5b610060600480360381019061005b91906107c2565b6100c2565b60405161006d9190610830565b60405180910390f35b610090600480360381019061008b9190610881565b61034a565b005b6100ac60048036038101906100a791906108d4565b6104a1565b6040516100b99190610830565b60405180910390f35b60006100f07f729336c539b6e052dd2f6c5a5e93b0305ebb62b3ef76dc5dc9c4cb128bb6553d60001b610726565b61011c7f2775242239ee09fa3862414f9fc9e41362b8c080fb32f603f78fd8636db45ee360001b610726565b6101487fad38acfd84987f5dffdd1f2fd15aed6dfbce29fe89f4141999c2a7b18ff3a54260001b610726565b600360005410156102ba5761017f7f780e8f7d4ebc9f439bd0d42b20e30089f30af405c725cd32286cd0c93f1da18460001b610726565b6101ab7f87520ed4e2b76cbd2ba9607555833f363217528cf50035d919c38f37dbb8940760001b610726565b6101d77fd0a54da4fdfbd1f6c1cf6f86bebd4875d32eac8f66e48d069596a7ed25af516b60001b610726565b60016000546101e69190610943565b6000819055506102187f7b2fc8767addd053edbe61eeb146228b06fc59b82b070ae4568f056f63be548560001b610726565b6102447f64eb23cbe65c599e3ac8d30cf29ccb09630e56f70405ecd1b5e795eea49519f360001b610726565b3373ffffffffffffffffffffffffffffffffffffffff1663a80de0e830600154856040518463ffffffff1660e01b8152600401610283939291906109c6565b600060405180830381600087803b15801561029d57600080fd5b505af11580156102b1573d6000803e3d6000fd5b505050506102e7565b6102e67f867c41a09d58d464109cd76f582c773e644ac8478025423cbe6a05020b89310660001b610726565b5b6103137fa49082b50d6f085a58f1c5513edb5dd3d0e4106e6cd53184e75d83495b35f6a360001b610726565b61033f7fa3d641733da50e1096be7f593b126231947f28e2ffab1be5d00e043414cc40f560001b610726565b600190509392505050565b6103767f0f1b52e2ee6e6ef1629b05ace4a86dbc6f4bdba8bf257f34261acf7cf3beee9060001b610726565b6103a27fc9b921ad4cc9beb74e123be697e95baae70363bf51680b75030a59ce6326943c60001b610726565b6103ce7f138aa6f75002e7413973c45b854ffd3e2979f37c1fee7b7ecc1c96acd68c625260001b610726565b816001819055506104017f328a7f562e03b6ef88ea362bb6823b91b3b43a1ca70664136538eeecf2cee67c60001b610726565b61042d7f9dda3318cb8a4229ab0ac60d27aeed9d6df55f4eb3d6bf2e80fa1ebf8c416ac560001b610726565b8273ffffffffffffffffffffffffffffffffffffffff1663a80de0e83084846040518463ffffffff1660e01b815260040161046a939291906109c6565b600060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b50505050505050565b60006104cf7f668d2df82b6b00eb1b9e07cba8a3dcdf86f54af52ccc45a3af36ea5a0799fc3d60001b610726565b6104fb7f55caf2e6dcd39534da9e4504132890bf0e726f1d06a5e8c2e4256f4aa75f954060001b610726565b6105277f75ae4f586bccc90d5e350db9318bd86306f5f3f0a54bae7ba530c0f782a3e86160001b610726565b600360005410156106975761055e7f774ccd033944c84b86a25ba6a2d08c4adf24ecc958beb0700a19a189c86434fc60001b610726565b61058a7fd12c507c776d1b8db11efa4ce0c8a044aee3bf6575cf82bda910b6e328762ecd60001b610726565b6105b67f378e6bc70b4131acbd2da8ea5a4d95fbdc38f8abf6075cf1f7689104591b7a7060001b610726565b60016000546105c59190610943565b6000819055506105f77f2d8ba50deb4ea399ff78383c497f316b838c0f6cf3bdb11173a95121d714a2fc60001b610726565b6106237fc293da893cee3ed6500a3c477462733ebe6c4ffbafb9f1b5a15d53b9479101ae60001b610726565b3373ffffffffffffffffffffffffffffffffffffffff166359508f8f3085856040518463ffffffff1660e01b8152600401610660939291906109fd565b600060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b505050506106c4565b6106c37f07c47d4d52582dbb951b41760144758aea11920752efbebd338cb2adc7ff991a60001b610726565b5b6106f07fced5ea82014c9e1b79cf333d16172801f99171385ce92b59a0ce92a3136d6b7b60001b610726565b61071c7f68389f68a489c8c1f3f0ca18ab6b20185d43237947daee01e601ea101e4dd0bf60001b610726565b6001905092915050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107598261072e565b9050919050565b6107698161074e565b811461077457600080fd5b50565b60008135905061078681610760565b92915050565b6000819050919050565b61079f8161078c565b81146107aa57600080fd5b50565b6000813590506107bc81610796565b92915050565b6000806000606084860312156107db576107da610729565b5b60006107e986828701610777565b93505060206107fa86828701610777565b925050604061080b868287016107ad565b9150509250925092565b60008115159050919050565b61082a81610815565b82525050565b60006020820190506108456000830184610821565b92915050565b6000819050919050565b61085e8161084b565b811461086957600080fd5b50565b60008135905061087b81610855565b92915050565b60008060006060848603121561089a57610899610729565b5b60006108a886828701610777565b93505060206108b98682870161086c565b92505060406108ca868287016107ad565b9150509250925092565b600080604083850312156108eb576108ea610729565b5b60006108f985828601610777565b925050602061090a858286016107ad565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061094e8261078c565b91506109598361078c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561098e5761098d610914565b5b828201905092915050565b6109a28161074e565b82525050565b6109b18161084b565b82525050565b6109c08161078c565b82525050565b60006060820190506109db6000830186610999565b6109e860208301856109a8565b6109f560408301846109b7565b949350505050565b6000606082019050610a126000830186610999565b610a1f6020830185610999565b610a2c60408301846109b7565b94935050505056fea2646970667358221220fa506a1b1f5f5caa628a28be086e727fdb51b2d65293b53ea1ffb68b753494b464736f6c63430008090033";

type ERC20EvilMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20EvilMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20EvilMock__factory extends ContractFactory {
  constructor(...args: ERC20EvilMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20EvilMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20EvilMock> {
    return super.deploy(overrides || {}) as Promise<ERC20EvilMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20EvilMock {
    return super.attach(address) as ERC20EvilMock;
  }
  connect(signer: Signer): ERC20EvilMock__factory {
    return super.connect(signer) as ERC20EvilMock__factory;
  }
  static readonly contractName: "ERC20EvilMock";
  public readonly contractName: "ERC20EvilMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20EvilMockInterface {
    return new utils.Interface(_abi) as ERC20EvilMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20EvilMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20EvilMock;
  }
}
