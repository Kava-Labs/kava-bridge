/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20EvilMock, ERC20EvilMockInterface } from "../ERC20EvilMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "toAddr",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "attackLock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080819055506105b9806100276000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806323b872dd14610046578063a7c67c6314610076578063a9059cbb14610092575b600080fd5b610060600480360381019061005b9190610311565b6100c2565b60405161006d919061037f565b60405180910390f35b610090600480360381019061008b91906103d0565b610161565b005b6100ac60048036038101906100a79190610423565b6101dc565b6040516100b9919061037f565b60405180910390f35b6000600360005410156101565760016000546100de9190610492565b6000819055503373ffffffffffffffffffffffffffffffffffffffff1663a80de0e830600154856040518463ffffffff1660e01b815260040161012393929190610515565b600060405180830381600087803b15801561013d57600080fd5b505af1158015610151573d6000803e3d6000fd5b505050505b600190509392505050565b816001819055508273ffffffffffffffffffffffffffffffffffffffff1663a80de0e83084846040518463ffffffff1660e01b81526004016101a593929190610515565b600060405180830381600087803b1580156101bf57600080fd5b505af11580156101d3573d6000803e3d6000fd5b50505050505050565b60006003600054101561026e5760016000546101f89190610492565b6000819055503373ffffffffffffffffffffffffffffffffffffffff166359508f8f3085856040518463ffffffff1660e01b815260040161023b9392919061054c565b600060405180830381600087803b15801561025557600080fd5b505af1158015610269573d6000803e3d6000fd5b505050505b6001905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102a88261027d565b9050919050565b6102b88161029d565b81146102c357600080fd5b50565b6000813590506102d5816102af565b92915050565b6000819050919050565b6102ee816102db565b81146102f957600080fd5b50565b60008135905061030b816102e5565b92915050565b60008060006060848603121561032a57610329610278565b5b6000610338868287016102c6565b9350506020610349868287016102c6565b925050604061035a868287016102fc565b9150509250925092565b60008115159050919050565b61037981610364565b82525050565b60006020820190506103946000830184610370565b92915050565b6000819050919050565b6103ad8161039a565b81146103b857600080fd5b50565b6000813590506103ca816103a4565b92915050565b6000806000606084860312156103e9576103e8610278565b5b60006103f7868287016102c6565b9350506020610408868287016103bb565b9250506040610419868287016102fc565b9150509250925092565b6000806040838503121561043a57610439610278565b5b6000610448858286016102c6565b9250506020610459858286016102fc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061049d826102db565b91506104a8836102db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156104dd576104dc610463565b5b828201905092915050565b6104f18161029d565b82525050565b6105008161039a565b82525050565b61050f816102db565b82525050565b600060608201905061052a60008301866104e8565b61053760208301856104f7565b6105446040830184610506565b949350505050565b600060608201905061056160008301866104e8565b61056e60208301856104e8565b61057b6040830184610506565b94935050505056fea2646970667358221220aaa81d5f2f4d1d847f4daa30698e9945094aa008588d9590f891ab0e4a6c7a3264736f6c63430008090033";

type ERC20EvilMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20EvilMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20EvilMock__factory extends ContractFactory {
  constructor(...args: ERC20EvilMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20EvilMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20EvilMock> {
    return super.deploy(overrides || {}) as Promise<ERC20EvilMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20EvilMock {
    return super.attach(address) as ERC20EvilMock;
  }
  connect(signer: Signer): ERC20EvilMock__factory {
    return super.connect(signer) as ERC20EvilMock__factory;
  }
  static readonly contractName: "ERC20EvilMock";
  public readonly contractName: "ERC20EvilMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20EvilMockInterface {
    return new utils.Interface(_abi) as ERC20EvilMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20EvilMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20EvilMock;
  }
}
