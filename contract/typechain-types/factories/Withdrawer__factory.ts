/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Withdrawer, WithdrawerInterface } from "../Withdrawer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "contractAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "toAddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061024c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d44cc24314610030575b600080fd5b61004a6004803603810190610045919061015a565b61004c565b005b8373ffffffffffffffffffffffffffffffffffffffff16639555a9428484846040518463ffffffff1660e01b8152600401610089939291906101df565b600060405180830381600087803b1580156100a357600080fd5b505af11580156100b7573d6000803e3d6000fd5b5050505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100f1826100c6565b9050919050565b610101816100e6565b811461010c57600080fd5b50565b60008135905061011e816100f8565b92915050565b6000819050919050565b61013781610124565b811461014257600080fd5b50565b6000813590506101548161012e565b92915050565b60008060008060808587031215610174576101736100c1565b5b60006101828782880161010f565b94505060206101938782880161010f565b93505060406101a48782880161010f565b92505060606101b587828801610145565b91505092959194509250565b6101ca816100e6565b82525050565b6101d981610124565b82525050565b60006060820190506101f460008301866101c1565b61020160208301856101c1565b61020e60408301846101d0565b94935050505056fea2646970667358221220a7967a7600e0bbc7cfd292b848e5fd9352cb6c757547c76109652784cfdcec2164736f6c63430008090033";

type WithdrawerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithdrawerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Withdrawer__factory extends ContractFactory {
  constructor(...args: WithdrawerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Withdrawer";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Withdrawer> {
    return super.deploy(overrides || {}) as Promise<Withdrawer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Withdrawer {
    return super.attach(address) as Withdrawer;
  }
  connect(signer: Signer): Withdrawer__factory {
    return super.connect(signer) as Withdrawer__factory;
  }
  static readonly contractName: "Withdrawer";
  public readonly contractName: "Withdrawer";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawerInterface {
    return new utils.Interface(_abi) as WithdrawerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Withdrawer {
    return new Contract(address, _abi, signerOrProvider) as Withdrawer;
  }
}
