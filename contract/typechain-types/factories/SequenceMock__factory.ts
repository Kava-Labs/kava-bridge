/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SequenceMock, SequenceMockInterface } from "../SequenceMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialValue",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "get",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101a23803806101a28339818101604052810190610032919061007c565b808060008190555050506100a9565b600080fd5b6000819050919050565b61005981610046565b811461006457600080fd5b50565b60008151905061007681610050565b92915050565b60006020828403121561009257610091610041565b5b60006100a084828501610067565b91505092915050565b60eb806100b76000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636d4ce63c146037578063d09de08a146051575b600080fd5b603d6059565b60405160489190609c565b60405180910390f35b60576066565b005b60006061606e565b905090565b606c6077565b565b60008054905090565b600160005401600081905550565b6000819050919050565b6096816085565b82525050565b600060208201905060af6000830184608f565b9291505056fea264697066735822122008f8f564b77a3e70aa23f09cc0739556638027bce781a3a8886535360921164064736f6c63430008090033";

type SequenceMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SequenceMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SequenceMock__factory extends ContractFactory {
  constructor(...args: SequenceMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SequenceMock";
  }

  deploy(
    initialValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SequenceMock> {
    return super.deploy(initialValue, overrides || {}) as Promise<SequenceMock>;
  }
  getDeployTransaction(
    initialValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(initialValue, overrides || {});
  }
  attach(address: string): SequenceMock {
    return super.attach(address) as SequenceMock;
  }
  connect(signer: Signer): SequenceMock__factory {
    return super.connect(signer) as SequenceMock__factory;
  }
  static readonly contractName: "SequenceMock";
  public readonly contractName: "SequenceMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SequenceMockInterface {
    return new utils.Interface(_abi) as SequenceMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SequenceMock {
    return new Contract(address, _abi, signerOrProvider) as SequenceMock;
  }
}
