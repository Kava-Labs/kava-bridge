// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest defines the request type for querying x/auction parameters.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse defines the response type for querying x/auction parameters.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryBridgedERC20PairsRequest defines the request type for querying x/bridge ERC20 pairs.
type QueryBridgedERC20PairsRequest struct {
}

func (m *QueryBridgedERC20PairsRequest) Reset()         { *m = QueryBridgedERC20PairsRequest{} }
func (m *QueryBridgedERC20PairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgedERC20PairsRequest) ProtoMessage()    {}
func (*QueryBridgedERC20PairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{2}
}
func (m *QueryBridgedERC20PairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgedERC20PairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgedERC20PairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgedERC20PairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgedERC20PairsRequest.Merge(m, src)
}
func (m *QueryBridgedERC20PairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgedERC20PairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgedERC20PairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgedERC20PairsRequest proto.InternalMessageInfo

// QueryBridgedERC20PairsRequest defines the response type for querying x/bridge ERC20 pairs.
type QueryBridgedERC20PairsResponse struct {
	// erc20_bridge_pairs defines all of the currently bridged erc20 tokens.
	ERC20BridgePairs ERC20BridgePairs `protobuf:"bytes,2,rep,name=erc20_bridge_pairs,json=erc20BridgePairs,proto3,castrepeated=ERC20BridgePairs" json:"erc20_bridge_pairs"`
}

func (m *QueryBridgedERC20PairsResponse) Reset()         { *m = QueryBridgedERC20PairsResponse{} }
func (m *QueryBridgedERC20PairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgedERC20PairsResponse) ProtoMessage()    {}
func (*QueryBridgedERC20PairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{3}
}
func (m *QueryBridgedERC20PairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgedERC20PairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgedERC20PairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgedERC20PairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgedERC20PairsResponse.Merge(m, src)
}
func (m *QueryBridgedERC20PairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgedERC20PairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgedERC20PairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgedERC20PairsResponse proto.InternalMessageInfo

func (m *QueryBridgedERC20PairsResponse) GetERC20BridgePairs() ERC20BridgePairs {
	if m != nil {
		return m.ERC20BridgePairs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "bridge.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bridge.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryBridgedERC20PairsRequest)(nil), "bridge.v1beta1.QueryBridgedERC20PairsRequest")
	proto.RegisterType((*QueryBridgedERC20PairsResponse)(nil), "bridge.v1beta1.QueryBridgedERC20PairsResponse")
}

func init() { proto.RegisterFile("bridge/v1beta1/query.proto", fileDescriptor_5d4272afc8643d4d) }

var fileDescriptor_5d4272afc8643d4d = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0xce, 0xd2, 0x40,
	0x18, 0xec, 0xa2, 0x72, 0xd8, 0x3f, 0x31, 0xbf, 0xeb, 0x1f, 0x83, 0x55, 0xb6, 0xa4, 0x1c, 0xc4,
	0xc4, 0x76, 0xa1, 0xfa, 0x04, 0x35, 0x9e, 0xbc, 0x40, 0x8f, 0x5e, 0xc8, 0x16, 0x36, 0xb5, 0x11,
	0xba, 0xa5, 0x5b, 0x88, 0xc4, 0x9b, 0x4f, 0x60, 0xe2, 0xd9, 0x93, 0x31, 0x31, 0x3e, 0x09, 0x47,
	0x12, 0x2f, 0x9e, 0x10, 0x8b, 0x0f, 0x62, 0xba, 0xbb, 0x18, 0x29, 0x60, 0xfe, 0x5b, 0xf7, 0x9b,
	0xd9, 0x99, 0xf9, 0x66, 0x0b, 0xcd, 0x30, 0x8b, 0xc7, 0x11, 0x23, 0x8b, 0x5e, 0xc8, 0x72, 0xda,
	0x23, 0xb3, 0x39, 0xcb, 0x96, 0x6e, 0x9a, 0xf1, 0x9c, 0xa3, 0xdb, 0x0a, 0x73, 0x35, 0x66, 0x56,
	0xb9, 0x2c, 0x1b, 0x79, 0x5d, 0xc5, 0x35, 0x1f, 0x56, 0xb0, 0x88, 0x25, 0x4c, 0xc4, 0x42, 0xa3,
	0xf7, 0x47, 0x5c, 0x4c, 0xb9, 0x18, 0xca, 0x13, 0x51, 0x07, 0x0d, 0x5d, 0x45, 0x3c, 0xe2, 0x6a,
	0x5e, 0x7e, 0xed, 0xe5, 0x22, 0xce, 0xa3, 0x09, 0x23, 0x34, 0x8d, 0x09, 0x4d, 0x12, 0x9e, 0xd3,
	0x3c, 0xe6, 0x89, 0xbe, 0x63, 0x5f, 0x41, 0x34, 0x28, 0x73, 0xf6, 0x69, 0x46, 0xa7, 0x22, 0x60,
	0xb3, 0x39, 0x13, 0xb9, 0xfd, 0x12, 0xde, 0x3d, 0x98, 0x8a, 0x94, 0x27, 0x82, 0xa1, 0x67, 0xb0,
	0x9e, 0xca, 0x49, 0x03, 0xb4, 0x40, 0xe7, 0xc2, 0xbb, 0xe7, 0x1e, 0xae, 0xe5, 0x2a, 0xbe, 0x7f,
	0x73, 0xb5, 0xb1, 0x8c, 0x40, 0x73, 0x6d, 0x0b, 0x36, 0xa5, 0x98, 0x2f, 0xb9, 0xe3, 0x17, 0xc1,
	0x73, 0xaf, 0xdb, 0xa7, 0x71, 0xf6, 0xd7, 0xed, 0x13, 0x80, 0xf8, 0x1c, 0x43, 0x3b, 0xbf, 0x83,
	0x48, 0x56, 0x34, 0x54, 0x86, 0xc3, 0xb4, 0x44, 0x1b, 0xb5, 0xd6, 0x8d, 0xce, 0x85, 0x67, 0x55,
	0x53, 0xc8, 0xfb, 0x4a, 0xab, 0x54, 0xf1, 0x9f, 0x94, 0x71, 0x8a, 0x8d, 0x75, 0x59, 0x01, 0xc4,
	0xb7, 0x9f, 0xc7, 0xb3, 0xe0, 0x52, 0x1a, 0xfd, 0x33, 0xf1, 0xbe, 0xd4, 0xe0, 0x2d, 0x99, 0x0f,
	0x2d, 0x60, 0x5d, 0xad, 0x88, 0xec, 0xaa, 0xe9, 0x71, 0x8b, 0x66, 0xfb, 0xbf, 0x1c, 0xb5, 0x99,
	0xdd, 0x7e, 0xff, 0xfd, 0xf7, 0xc7, 0x5a, 0x13, 0x3d, 0x20, 0x6f, 0xe8, 0x82, 0x92, 0xca, 0xdb,
	0xab, 0x0a, 0xd1, 0x67, 0x00, 0xef, 0x1c, 0x95, 0x83, 0x9c, 0x93, 0xfa, 0xe7, 0x6a, 0x36, 0xdd,
	0xeb, 0xd2, 0x75, 0x32, 0x22, 0x93, 0x3d, 0x46, 0x8f, 0x4e, 0x26, 0x53, 0x47, 0x47, 0x96, 0xe5,
	0xc8, 0xe7, 0xf0, 0x07, 0xdb, 0x5f, 0x18, 0x7c, 0x2d, 0x30, 0x58, 0x15, 0x18, 0xac, 0x0b, 0x0c,
	0xb6, 0x05, 0x06, 0x1f, 0x76, 0xd8, 0x58, 0xef, 0xb0, 0xf1, 0x63, 0x87, 0x8d, 0x57, 0x24, 0x8a,
	0xf3, 0xd7, 0xf3, 0xd0, 0x1d, 0xf1, 0xa9, 0x14, 0x75, 0x26, 0x34, 0x14, 0xea, 0x4b, 0xcb, 0xbf,
	0xdd, 0xfb, 0xe4, 0xcb, 0x94, 0x89, 0xb0, 0x2e, 0xff, 0xd2, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x15, 0xea, 0xfa, 0x5c, 0x03, 0x00, 0x00,
}

func (this *QueryParamsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryParamsRequest)
	if !ok {
		that2, ok := that.(QueryParamsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryParamsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryParamsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryParamsRequest but is not nil && this == nil")
	}
	return nil
}
func (this *QueryParamsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParamsRequest)
	if !ok {
		that2, ok := that.(QueryParamsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryParamsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryParamsResponse)
	if !ok {
		that2, ok := that.(QueryParamsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryParamsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryParamsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryParamsResponse but is not nil && this == nil")
	}
	if !this.Params.Equal(&that1.Params) {
		return fmt.Errorf("Params this(%v) Not Equal that(%v)", this.Params, that1.Params)
	}
	return nil
}
func (this *QueryParamsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParamsResponse)
	if !ok {
		that2, ok := that.(QueryParamsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Params.Equal(&that1.Params) {
		return false
	}
	return true
}
func (this *QueryBridgedERC20PairsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryBridgedERC20PairsRequest)
	if !ok {
		that2, ok := that.(QueryBridgedERC20PairsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryBridgedERC20PairsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryBridgedERC20PairsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryBridgedERC20PairsRequest but is not nil && this == nil")
	}
	return nil
}
func (this *QueryBridgedERC20PairsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryBridgedERC20PairsRequest)
	if !ok {
		that2, ok := that.(QueryBridgedERC20PairsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryBridgedERC20PairsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryBridgedERC20PairsResponse)
	if !ok {
		that2, ok := that.(QueryBridgedERC20PairsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryBridgedERC20PairsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryBridgedERC20PairsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryBridgedERC20PairsResponse but is not nil && this == nil")
	}
	if len(this.ERC20BridgePairs) != len(that1.ERC20BridgePairs) {
		return fmt.Errorf("ERC20BridgePairs this(%v) Not Equal that(%v)", len(this.ERC20BridgePairs), len(that1.ERC20BridgePairs))
	}
	for i := range this.ERC20BridgePairs {
		if !this.ERC20BridgePairs[i].Equal(&that1.ERC20BridgePairs[i]) {
			return fmt.Errorf("ERC20BridgePairs this[%v](%v) Not Equal that[%v](%v)", i, this.ERC20BridgePairs[i], i, that1.ERC20BridgePairs[i])
		}
	}
	return nil
}
func (this *QueryBridgedERC20PairsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryBridgedERC20PairsResponse)
	if !ok {
		that2, ok := that.(QueryBridgedERC20PairsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ERC20BridgePairs) != len(that1.ERC20BridgePairs) {
		return false
	}
	for i := range this.ERC20BridgePairs {
		if !this.ERC20BridgePairs[i].Equal(&that1.ERC20BridgePairs[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries all parameters of the auction module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// BridgedERC20Pairs queries the bridge address pairs
	BridgedERC20Pairs(ctx context.Context, in *QueryBridgedERC20PairsRequest, opts ...grpc.CallOption) (*QueryBridgedERC20PairsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgedERC20Pairs(ctx context.Context, in *QueryBridgedERC20PairsRequest, opts ...grpc.CallOption) (*QueryBridgedERC20PairsResponse, error) {
	out := new(QueryBridgedERC20PairsResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Query/BridgedERC20Pairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries all parameters of the auction module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// BridgedERC20Pairs queries the bridge address pairs
	BridgedERC20Pairs(context.Context, *QueryBridgedERC20PairsRequest) (*QueryBridgedERC20PairsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BridgedERC20Pairs(ctx context.Context, req *QueryBridgedERC20PairsRequest) (*QueryBridgedERC20PairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgedERC20Pairs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgedERC20Pairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgedERC20PairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgedERC20Pairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Query/BridgedERC20Pairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgedERC20Pairs(ctx, req.(*QueryBridgedERC20PairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BridgedERC20Pairs",
			Handler:    _Query_BridgedERC20Pairs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBridgedERC20PairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgedERC20PairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgedERC20PairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBridgedERC20PairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgedERC20PairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgedERC20PairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ERC20BridgePairs) > 0 {
		for iNdEx := len(m.ERC20BridgePairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ERC20BridgePairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBridgedERC20PairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBridgedERC20PairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ERC20BridgePairs) > 0 {
		for _, e := range m.ERC20BridgePairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgedERC20PairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgedERC20PairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgedERC20PairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgedERC20PairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgedERC20PairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgedERC20PairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ERC20BridgePairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ERC20BridgePairs = append(m.ERC20BridgePairs, ERC20BridgePair{})
			if err := m.ERC20BridgePairs[len(m.ERC20BridgePairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
