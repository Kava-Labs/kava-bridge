// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest defines the request type for querying x/bridge parameters.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse defines the response type for querying x/bridge parameters.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryERC20BridgePairsRequest defines the request type for querying x/bridge ERC20 pairs.
type QueryERC20BridgePairsRequest struct {
}

func (m *QueryERC20BridgePairsRequest) Reset()         { *m = QueryERC20BridgePairsRequest{} }
func (m *QueryERC20BridgePairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryERC20BridgePairsRequest) ProtoMessage()    {}
func (*QueryERC20BridgePairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{2}
}
func (m *QueryERC20BridgePairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC20BridgePairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC20BridgePairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC20BridgePairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC20BridgePairsRequest.Merge(m, src)
}
func (m *QueryERC20BridgePairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC20BridgePairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC20BridgePairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC20BridgePairsRequest proto.InternalMessageInfo

// QueryERC20BridgePairsRequest defines the response type for querying x/bridge ERC20 pairs.
type QueryERC20BridgePairsResponse struct {
	// ERC20BridgePairs defines all of the currently bridged erc20 tokens.
	ERC20BridgePairs ERC20BridgePairs `protobuf:"bytes,1,rep,name=erc20_bridge_pairs,json=erc20BridgePairs,proto3,castrepeated=ERC20BridgePairs" json:"erc20_bridge_pairs"`
}

func (m *QueryERC20BridgePairsResponse) Reset()         { *m = QueryERC20BridgePairsResponse{} }
func (m *QueryERC20BridgePairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryERC20BridgePairsResponse) ProtoMessage()    {}
func (*QueryERC20BridgePairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{3}
}
func (m *QueryERC20BridgePairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC20BridgePairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC20BridgePairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC20BridgePairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC20BridgePairsResponse.Merge(m, src)
}
func (m *QueryERC20BridgePairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC20BridgePairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC20BridgePairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC20BridgePairsResponse proto.InternalMessageInfo

func (m *QueryERC20BridgePairsResponse) GetERC20BridgePairs() ERC20BridgePairs {
	if m != nil {
		return m.ERC20BridgePairs
	}
	return nil
}

// QueryERC20BridgePairRequest defines the request type for querying x/bridge ERC20 pair.
type QueryERC20BridgePairRequest struct {
	// Address defines the internal or external address to query for. This is a
	// string and not bytes as bytes in the query must be base64 encoded which is
	// not ideal for addresses where we prefer hex encoding.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryERC20BridgePairRequest) Reset()         { *m = QueryERC20BridgePairRequest{} }
func (m *QueryERC20BridgePairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryERC20BridgePairRequest) ProtoMessage()    {}
func (*QueryERC20BridgePairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{4}
}
func (m *QueryERC20BridgePairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC20BridgePairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC20BridgePairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC20BridgePairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC20BridgePairRequest.Merge(m, src)
}
func (m *QueryERC20BridgePairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC20BridgePairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC20BridgePairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC20BridgePairRequest proto.InternalMessageInfo

func (m *QueryERC20BridgePairRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryERC20BridgePairRequest defines the response type for querying x/bridge ERC20 pair.
type QueryERC20BridgePairResponse struct {
	// ERC20BridgePair defines the queried bridged erc20 pair.
	ERC20BridgePair ERC20BridgePair `protobuf:"bytes,1,opt,name=erc20_bridge_pair,json=erc20BridgePair,proto3" json:"erc20_bridge_pair"`
}

func (m *QueryERC20BridgePairResponse) Reset()         { *m = QueryERC20BridgePairResponse{} }
func (m *QueryERC20BridgePairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryERC20BridgePairResponse) ProtoMessage()    {}
func (*QueryERC20BridgePairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{5}
}
func (m *QueryERC20BridgePairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryERC20BridgePairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryERC20BridgePairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryERC20BridgePairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryERC20BridgePairResponse.Merge(m, src)
}
func (m *QueryERC20BridgePairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryERC20BridgePairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryERC20BridgePairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryERC20BridgePairResponse proto.InternalMessageInfo

func (m *QueryERC20BridgePairResponse) GetERC20BridgePair() ERC20BridgePair {
	if m != nil {
		return m.ERC20BridgePair
	}
	return ERC20BridgePair{}
}

// QueryConversionPairsRequest defines the request type for querying x/bridge conversion pairs.
type QueryConversionPairsRequest struct {
}

func (m *QueryConversionPairsRequest) Reset()         { *m = QueryConversionPairsRequest{} }
func (m *QueryConversionPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConversionPairsRequest) ProtoMessage()    {}
func (*QueryConversionPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{6}
}
func (m *QueryConversionPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversionPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversionPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversionPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversionPairsRequest.Merge(m, src)
}
func (m *QueryConversionPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversionPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversionPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversionPairsRequest proto.InternalMessageInfo

// QueryConversionPairsResponse defines the response type for querying x/bridge conversion pairs.
type QueryConversionPairsResponse struct {
	// ConversionPairs defines the queried conversion pairs.
	ConversionPairs []ConversionPair `protobuf:"bytes,1,rep,name=conversion_pairs,json=conversionPairs,proto3" json:"conversion_pairs"`
}

func (m *QueryConversionPairsResponse) Reset()         { *m = QueryConversionPairsResponse{} }
func (m *QueryConversionPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConversionPairsResponse) ProtoMessage()    {}
func (*QueryConversionPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{7}
}
func (m *QueryConversionPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversionPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversionPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversionPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversionPairsResponse.Merge(m, src)
}
func (m *QueryConversionPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversionPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversionPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversionPairsResponse proto.InternalMessageInfo

func (m *QueryConversionPairsResponse) GetConversionPairs() []ConversionPair {
	if m != nil {
		return m.ConversionPairs
	}
	return nil
}

// QueryConversionPairRequest defines the request type for querying a x/bridge conversion pair.
type QueryConversionPairRequest struct {
	// AddressOrDenom defines the ERC20 address or the sdk.Coin denom of the pair
	// to search for.
	AddressOrDenom string `protobuf:"bytes,1,opt,name=address_or_denom,json=addressOrDenom,proto3" json:"address_or_denom,omitempty"`
}

func (m *QueryConversionPairRequest) Reset()         { *m = QueryConversionPairRequest{} }
func (m *QueryConversionPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConversionPairRequest) ProtoMessage()    {}
func (*QueryConversionPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{8}
}
func (m *QueryConversionPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversionPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversionPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversionPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversionPairRequest.Merge(m, src)
}
func (m *QueryConversionPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversionPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversionPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversionPairRequest proto.InternalMessageInfo

func (m *QueryConversionPairRequest) GetAddressOrDenom() string {
	if m != nil {
		return m.AddressOrDenom
	}
	return ""
}

// QueryConversionPairsResponse defines the response type for querying a x/bridge conversion pair.
type QueryConversionPairResponse struct {
	// ConversionPair defines the queried conversion pairs.
	ConversionPair ConversionPair `protobuf:"bytes,1,opt,name=conversion_pair,json=conversionPair,proto3" json:"conversion_pair"`
}

func (m *QueryConversionPairResponse) Reset()         { *m = QueryConversionPairResponse{} }
func (m *QueryConversionPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConversionPairResponse) ProtoMessage()    {}
func (*QueryConversionPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d4272afc8643d4d, []int{9}
}
func (m *QueryConversionPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversionPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversionPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversionPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversionPairResponse.Merge(m, src)
}
func (m *QueryConversionPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversionPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversionPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversionPairResponse proto.InternalMessageInfo

func (m *QueryConversionPairResponse) GetConversionPair() ConversionPair {
	if m != nil {
		return m.ConversionPair
	}
	return ConversionPair{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "bridge.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "bridge.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryERC20BridgePairsRequest)(nil), "bridge.v1beta1.QueryERC20BridgePairsRequest")
	proto.RegisterType((*QueryERC20BridgePairsResponse)(nil), "bridge.v1beta1.QueryERC20BridgePairsResponse")
	proto.RegisterType((*QueryERC20BridgePairRequest)(nil), "bridge.v1beta1.QueryERC20BridgePairRequest")
	proto.RegisterType((*QueryERC20BridgePairResponse)(nil), "bridge.v1beta1.QueryERC20BridgePairResponse")
	proto.RegisterType((*QueryConversionPairsRequest)(nil), "bridge.v1beta1.QueryConversionPairsRequest")
	proto.RegisterType((*QueryConversionPairsResponse)(nil), "bridge.v1beta1.QueryConversionPairsResponse")
	proto.RegisterType((*QueryConversionPairRequest)(nil), "bridge.v1beta1.QueryConversionPairRequest")
	proto.RegisterType((*QueryConversionPairResponse)(nil), "bridge.v1beta1.QueryConversionPairResponse")
}

func init() { proto.RegisterFile("bridge/v1beta1/query.proto", fileDescriptor_5d4272afc8643d4d) }

var fileDescriptor_5d4272afc8643d4d = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0x7c, 0x04, 0xb1, 0x95, 0x92, 0xb0, 0x54, 0x50, 0xb9, 0x8d, 0x83, 0x5c, 0x50,
	0x03, 0x4d, 0xe2, 0x26, 0x45, 0xe2, 0xe3, 0x84, 0x52, 0xe0, 0x82, 0x50, 0xdb, 0x1c, 0xb9, 0x44,
	0x9b, 0x64, 0x65, 0x2c, 0x12, 0xaf, 0xbb, 0x76, 0x22, 0xaa, 0xaa, 0x17, 0xc4, 0x03, 0x20, 0x71,
	0x41, 0x82, 0x03, 0x37, 0x10, 0xbc, 0x48, 0x8f, 0x95, 0xb8, 0x70, 0x2a, 0x25, 0xe1, 0x41, 0x50,
	0xd6, 0x63, 0x83, 0x37, 0x0e, 0xf8, 0xe6, 0xcc, 0xcc, 0xce, 0xfc, 0xe6, 0xaf, 0xff, 0x28, 0x58,
	0xeb, 0x08, 0xbb, 0x67, 0x31, 0x73, 0x54, 0xef, 0x30, 0x9f, 0xd6, 0xcd, 0xbd, 0x21, 0x13, 0xfb,
	0x35, 0x57, 0x70, 0x9f, 0x93, 0x5c, 0x90, 0xab, 0x41, 0x4e, 0xbb, 0xae, 0xd4, 0x76, 0xb9, 0x33,
	0x62, 0xc2, 0xb3, 0xb9, 0xd3, 0x76, 0xa9, 0x2d, 0x82, 0x57, 0x9a, 0xda, 0x91, 0x89, 0x6e, 0x63,
	0x03, 0x72, 0x2b, 0x4a, 0xce, 0x62, 0x0e, 0xf3, 0x6c, 0x0f, 0xb2, 0x8b, 0x16, 0xb7, 0xb8, 0xfc,
	0x34, 0xa7, 0x5f, 0xe1, 0x1b, 0x8b, 0x73, 0xab, 0xcf, 0x4c, 0xea, 0xda, 0x26, 0x75, 0x1c, 0xee,
	0x53, 0xdf, 0xe6, 0x0e, 0xbc, 0x31, 0x16, 0x31, 0xd9, 0x9d, 0x22, 0xef, 0x50, 0x41, 0x07, 0x5e,
	0x8b, 0xed, 0x0d, 0x99, 0xe7, 0x1b, 0x4f, 0xf0, 0xe5, 0x58, 0xd4, 0x73, 0xb9, 0xe3, 0x31, 0x72,
	0x1b, 0x67, 0x5d, 0x19, 0x59, 0x42, 0xd7, 0x50, 0x79, 0xa1, 0x71, 0xa5, 0x16, 0xdf, 0xb0, 0x16,
	0xd4, 0x37, 0xcf, 0x1d, 0x9d, 0x94, 0x32, 0x2d, 0xa8, 0x35, 0x74, 0xbc, 0x22, 0x9b, 0x3d, 0x6a,
	0x6d, 0x35, 0x36, 0x9a, 0xf2, 0xc1, 0x0e, 0xb5, 0x45, 0x34, 0xec, 0x03, 0xc2, 0xc5, 0x39, 0x05,
	0x30, 0xf7, 0x00, 0x13, 0xa9, 0x42, 0x3b, 0x18, 0x27, 0xd5, 0x9a, 0x32, 0x9c, 0x2d, 0x2f, 0x34,
	0x4a, 0x2a, 0x83, 0xd2, 0xa5, 0x59, 0x99, 0xc2, 0x8c, 0x4f, 0x4a, 0x05, 0xb5, 0xfd, 0x97, 0x1f,
	0xb3, 0xb1, 0x56, 0x41, 0x0e, 0xfa, 0x2b, 0x62, 0xdc, 0xc1, 0xcb, 0x49, 0x74, 0x40, 0x4f, 0x96,
	0xf0, 0x05, 0xda, 0xeb, 0x09, 0xe6, 0x05, 0xa2, 0x5c, 0x6c, 0x85, 0x3f, 0x8d, 0xd7, 0x28, 0x79,
	0xf1, 0x68, 0xad, 0x1e, 0xbe, 0x34, 0xb3, 0x16, 0x28, 0xfb, 0xdf, 0xad, 0xae, 0xc2, 0x56, 0x79,
	0xb5, 0x79, 0x5e, 0x59, 0xc0, 0x28, 0x02, 0xff, 0x56, 0xe4, 0xb6, 0x98, 0xfa, 0x1c, 0x20, 0x67,
	0xd2, 0x00, 0xb9, 0x8d, 0x0b, 0x8a, 0x4f, 0x43, 0xe5, 0x75, 0x95, 0x31, 0xde, 0x02, 0x5c, 0x90,
	0xef, 0xc6, 0x1b, 0x1b, 0x8f, 0xb1, 0x96, 0x30, 0x30, 0x94, 0xb3, 0x8c, 0x0b, 0xa0, 0x5f, 0x9b,
	0x8b, 0x76, 0x8f, 0x39, 0x7c, 0x00, 0xba, 0xe6, 0x20, 0xbe, 0x2d, 0x1e, 0x4e, 0xa3, 0x46, 0x3f,
	0x71, 0xaf, 0x88, 0xfb, 0x29, 0xce, 0x2b, 0xdc, 0x20, 0x6d, 0x3a, 0xec, 0x5c, 0x1c, 0xbb, 0xf1,
	0x2e, 0x8b, 0xcf, 0xcb, 0x71, 0x64, 0x84, 0xb3, 0x81, 0xcd, 0x89, 0xa1, 0x76, 0x9a, 0xbd, 0x24,
	0x6d, 0xf5, 0x9f, 0x35, 0x01, 0xab, 0xb1, 0xfa, 0xea, 0xdb, 0xaf, 0xb7, 0x67, 0x8a, 0x64, 0xd9,
	0x7c, 0x41, 0x47, 0xd4, 0x54, 0x8e, 0x3c, 0x38, 0x23, 0xf2, 0x11, 0xe1, 0x19, 0xbb, 0x92, 0x4a,
	0x62, 0xfb, 0x39, 0x97, 0xa6, 0x55, 0x53, 0x56, 0x03, 0x96, 0x29, 0xb1, 0x6e, 0x92, 0xb5, 0x44,
	0xac, 0xe0, 0x67, 0x55, 0xda, 0xad, 0x2a, 0x7d, 0x41, 0x3e, 0x21, 0xac, 0xfa, 0x91, 0xac, 0xa7,
	0x99, 0x19, 0x02, 0x56, 0xd2, 0x15, 0x03, 0xdf, 0x3d, 0xc9, 0xb7, 0x49, 0xea, 0x29, 0xf9, 0xcc,
	0x03, 0xb0, 0xd0, 0x21, 0x79, 0x8f, 0x70, 0x5e, 0x71, 0xfc, 0x1c, 0xd2, 0xe4, 0xb3, 0x99, 0x43,
	0x3a, 0xe7, 0x88, 0x8c, 0xaa, 0x24, 0x5d, 0x23, 0x37, 0x12, 0x49, 0xff, 0x58, 0x0d, 0x74, 0xfc,
	0x8a, 0x70, 0x2e, 0xde, 0x8a, 0xdc, 0x4a, 0x31, 0x2f, 0x64, 0x5b, 0x4f, 0x55, 0x0b, 0x68, 0x0f,
	0x24, 0xda, 0x7d, 0x72, 0x37, 0x15, 0x5a, 0x24, 0x61, 0x74, 0x9d, 0x87, 0xcd, 0xdd, 0xd3, 0x9f,
	0x3a, 0xfa, 0x3c, 0xd6, 0xd1, 0xd1, 0x58, 0x47, 0xc7, 0x63, 0x1d, 0x9d, 0x8e, 0x75, 0xf4, 0x66,
	0xa2, 0x67, 0x8e, 0x27, 0x7a, 0xe6, 0xfb, 0x44, 0xcf, 0x3c, 0x33, 0x2d, 0xdb, 0x7f, 0x3e, 0xec,
	0xd4, 0xba, 0x7c, 0x20, 0xa7, 0x54, 0xfb, 0xb4, 0xe3, 0x05, 0x5f, 0x30, 0xef, 0x65, 0x38, 0xd8,
	0xdf, 0x77, 0x99, 0xd7, 0xc9, 0xca, 0x3f, 0xa7, 0xcd, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdf,
	0x67, 0x2e, 0x79, 0x5e, 0x07, 0x00, 0x00,
}

func (this *QueryParamsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryParamsRequest)
	if !ok {
		that2, ok := that.(QueryParamsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryParamsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryParamsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryParamsRequest but is not nil && this == nil")
	}
	return nil
}
func (this *QueryParamsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParamsRequest)
	if !ok {
		that2, ok := that.(QueryParamsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryParamsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryParamsResponse)
	if !ok {
		that2, ok := that.(QueryParamsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryParamsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryParamsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryParamsResponse but is not nil && this == nil")
	}
	if !this.Params.Equal(&that1.Params) {
		return fmt.Errorf("Params this(%v) Not Equal that(%v)", this.Params, that1.Params)
	}
	return nil
}
func (this *QueryParamsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryParamsResponse)
	if !ok {
		that2, ok := that.(QueryParamsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Params.Equal(&that1.Params) {
		return false
	}
	return true
}
func (this *QueryERC20BridgePairsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryERC20BridgePairsRequest)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryERC20BridgePairsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryERC20BridgePairsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryERC20BridgePairsRequest but is not nil && this == nil")
	}
	return nil
}
func (this *QueryERC20BridgePairsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryERC20BridgePairsRequest)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryERC20BridgePairsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryERC20BridgePairsResponse)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryERC20BridgePairsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryERC20BridgePairsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryERC20BridgePairsResponse but is not nil && this == nil")
	}
	if len(this.ERC20BridgePairs) != len(that1.ERC20BridgePairs) {
		return fmt.Errorf("ERC20BridgePairs this(%v) Not Equal that(%v)", len(this.ERC20BridgePairs), len(that1.ERC20BridgePairs))
	}
	for i := range this.ERC20BridgePairs {
		if !this.ERC20BridgePairs[i].Equal(&that1.ERC20BridgePairs[i]) {
			return fmt.Errorf("ERC20BridgePairs this[%v](%v) Not Equal that[%v](%v)", i, this.ERC20BridgePairs[i], i, that1.ERC20BridgePairs[i])
		}
	}
	return nil
}
func (this *QueryERC20BridgePairsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryERC20BridgePairsResponse)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ERC20BridgePairs) != len(that1.ERC20BridgePairs) {
		return false
	}
	for i := range this.ERC20BridgePairs {
		if !this.ERC20BridgePairs[i].Equal(&that1.ERC20BridgePairs[i]) {
			return false
		}
	}
	return true
}
func (this *QueryERC20BridgePairRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryERC20BridgePairRequest)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryERC20BridgePairRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryERC20BridgePairRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryERC20BridgePairRequest but is not nil && this == nil")
	}
	if this.Address != that1.Address {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	return nil
}
func (this *QueryERC20BridgePairRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryERC20BridgePairRequest)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *QueryERC20BridgePairResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryERC20BridgePairResponse)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryERC20BridgePairResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryERC20BridgePairResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryERC20BridgePairResponse but is not nil && this == nil")
	}
	if !this.ERC20BridgePair.Equal(&that1.ERC20BridgePair) {
		return fmt.Errorf("ERC20BridgePair this(%v) Not Equal that(%v)", this.ERC20BridgePair, that1.ERC20BridgePair)
	}
	return nil
}
func (this *QueryERC20BridgePairResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryERC20BridgePairResponse)
	if !ok {
		that2, ok := that.(QueryERC20BridgePairResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ERC20BridgePair.Equal(&that1.ERC20BridgePair) {
		return false
	}
	return true
}
func (this *QueryConversionPairsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryConversionPairsRequest)
	if !ok {
		that2, ok := that.(QueryConversionPairsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryConversionPairsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryConversionPairsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryConversionPairsRequest but is not nil && this == nil")
	}
	return nil
}
func (this *QueryConversionPairsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryConversionPairsRequest)
	if !ok {
		that2, ok := that.(QueryConversionPairsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryConversionPairsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryConversionPairsResponse)
	if !ok {
		that2, ok := that.(QueryConversionPairsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryConversionPairsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryConversionPairsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryConversionPairsResponse but is not nil && this == nil")
	}
	if len(this.ConversionPairs) != len(that1.ConversionPairs) {
		return fmt.Errorf("ConversionPairs this(%v) Not Equal that(%v)", len(this.ConversionPairs), len(that1.ConversionPairs))
	}
	for i := range this.ConversionPairs {
		if !this.ConversionPairs[i].Equal(&that1.ConversionPairs[i]) {
			return fmt.Errorf("ConversionPairs this[%v](%v) Not Equal that[%v](%v)", i, this.ConversionPairs[i], i, that1.ConversionPairs[i])
		}
	}
	return nil
}
func (this *QueryConversionPairsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryConversionPairsResponse)
	if !ok {
		that2, ok := that.(QueryConversionPairsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ConversionPairs) != len(that1.ConversionPairs) {
		return false
	}
	for i := range this.ConversionPairs {
		if !this.ConversionPairs[i].Equal(&that1.ConversionPairs[i]) {
			return false
		}
	}
	return true
}
func (this *QueryConversionPairRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryConversionPairRequest)
	if !ok {
		that2, ok := that.(QueryConversionPairRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryConversionPairRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryConversionPairRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryConversionPairRequest but is not nil && this == nil")
	}
	if this.AddressOrDenom != that1.AddressOrDenom {
		return fmt.Errorf("AddressOrDenom this(%v) Not Equal that(%v)", this.AddressOrDenom, that1.AddressOrDenom)
	}
	return nil
}
func (this *QueryConversionPairRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryConversionPairRequest)
	if !ok {
		that2, ok := that.(QueryConversionPairRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AddressOrDenom != that1.AddressOrDenom {
		return false
	}
	return true
}
func (this *QueryConversionPairResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryConversionPairResponse)
	if !ok {
		that2, ok := that.(QueryConversionPairResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryConversionPairResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryConversionPairResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryConversionPairResponse but is not nil && this == nil")
	}
	if !this.ConversionPair.Equal(&that1.ConversionPair) {
		return fmt.Errorf("ConversionPair this(%v) Not Equal that(%v)", this.ConversionPair, that1.ConversionPair)
	}
	return nil
}
func (this *QueryConversionPairResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryConversionPairResponse)
	if !ok {
		that2, ok := that.(QueryConversionPairResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ConversionPair.Equal(&that1.ConversionPair) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries all parameters of the bridge module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ERC20BridgePairs queries the bridge address pairs.
	ERC20BridgePairs(ctx context.Context, in *QueryERC20BridgePairsRequest, opts ...grpc.CallOption) (*QueryERC20BridgePairsResponse, error)
	// ERC20BridgePair queries a bridge address pair with either internal or
	// external address.
	ERC20BridgePair(ctx context.Context, in *QueryERC20BridgePairRequest, opts ...grpc.CallOption) (*QueryERC20BridgePairResponse, error)
	// ConversionPairs queries the ERC20/sdk.Coin conversion pairs.
	ConversionPairs(ctx context.Context, in *QueryConversionPairsRequest, opts ...grpc.CallOption) (*QueryConversionPairsResponse, error)
	// ConversionPair queries a conversion pair with either the ERC20 address or
	// sdk.Coin denom.
	ConversionPair(ctx context.Context, in *QueryConversionPairRequest, opts ...grpc.CallOption) (*QueryConversionPairResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC20BridgePairs(ctx context.Context, in *QueryERC20BridgePairsRequest, opts ...grpc.CallOption) (*QueryERC20BridgePairsResponse, error) {
	out := new(QueryERC20BridgePairsResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Query/ERC20BridgePairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ERC20BridgePair(ctx context.Context, in *QueryERC20BridgePairRequest, opts ...grpc.CallOption) (*QueryERC20BridgePairResponse, error) {
	out := new(QueryERC20BridgePairResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Query/ERC20BridgePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConversionPairs(ctx context.Context, in *QueryConversionPairsRequest, opts ...grpc.CallOption) (*QueryConversionPairsResponse, error) {
	out := new(QueryConversionPairsResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Query/ConversionPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConversionPair(ctx context.Context, in *QueryConversionPairRequest, opts ...grpc.CallOption) (*QueryConversionPairResponse, error) {
	out := new(QueryConversionPairResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Query/ConversionPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries all parameters of the bridge module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ERC20BridgePairs queries the bridge address pairs.
	ERC20BridgePairs(context.Context, *QueryERC20BridgePairsRequest) (*QueryERC20BridgePairsResponse, error)
	// ERC20BridgePair queries a bridge address pair with either internal or
	// external address.
	ERC20BridgePair(context.Context, *QueryERC20BridgePairRequest) (*QueryERC20BridgePairResponse, error)
	// ConversionPairs queries the ERC20/sdk.Coin conversion pairs.
	ConversionPairs(context.Context, *QueryConversionPairsRequest) (*QueryConversionPairsResponse, error)
	// ConversionPair queries a conversion pair with either the ERC20 address or
	// sdk.Coin denom.
	ConversionPair(context.Context, *QueryConversionPairRequest) (*QueryConversionPairResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ERC20BridgePairs(ctx context.Context, req *QueryERC20BridgePairsRequest) (*QueryERC20BridgePairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20BridgePairs not implemented")
}
func (*UnimplementedQueryServer) ERC20BridgePair(ctx context.Context, req *QueryERC20BridgePairRequest) (*QueryERC20BridgePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20BridgePair not implemented")
}
func (*UnimplementedQueryServer) ConversionPairs(ctx context.Context, req *QueryConversionPairsRequest) (*QueryConversionPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversionPairs not implemented")
}
func (*UnimplementedQueryServer) ConversionPair(ctx context.Context, req *QueryConversionPairRequest) (*QueryConversionPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversionPair not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC20BridgePairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC20BridgePairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC20BridgePairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Query/ERC20BridgePairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC20BridgePairs(ctx, req.(*QueryERC20BridgePairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ERC20BridgePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryERC20BridgePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ERC20BridgePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Query/ERC20BridgePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ERC20BridgePair(ctx, req.(*QueryERC20BridgePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConversionPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConversionPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConversionPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Query/ConversionPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConversionPairs(ctx, req.(*QueryConversionPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConversionPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConversionPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConversionPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Query/ConversionPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConversionPair(ctx, req.(*QueryConversionPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ERC20BridgePairs",
			Handler:    _Query_ERC20BridgePairs_Handler,
		},
		{
			MethodName: "ERC20BridgePair",
			Handler:    _Query_ERC20BridgePair_Handler,
		},
		{
			MethodName: "ConversionPairs",
			Handler:    _Query_ConversionPairs_Handler,
		},
		{
			MethodName: "ConversionPair",
			Handler:    _Query_ConversionPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryERC20BridgePairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC20BridgePairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC20BridgePairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryERC20BridgePairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC20BridgePairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC20BridgePairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ERC20BridgePairs) > 0 {
		for iNdEx := len(m.ERC20BridgePairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ERC20BridgePairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryERC20BridgePairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC20BridgePairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC20BridgePairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryERC20BridgePairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryERC20BridgePairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryERC20BridgePairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ERC20BridgePair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryConversionPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversionPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversionPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryConversionPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversionPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversionPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversionPairs) > 0 {
		for iNdEx := len(m.ConversionPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConversionPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryConversionPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversionPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversionPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressOrDenom) > 0 {
		i -= len(m.AddressOrDenom)
		copy(dAtA[i:], m.AddressOrDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AddressOrDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConversionPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversionPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversionPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConversionPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryERC20BridgePairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryERC20BridgePairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ERC20BridgePairs) > 0 {
		for _, e := range m.ERC20BridgePairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryERC20BridgePairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryERC20BridgePairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ERC20BridgePair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryConversionPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryConversionPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConversionPairs) > 0 {
		for _, e := range m.ConversionPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryConversionPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddressOrDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConversionPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConversionPair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC20BridgePairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC20BridgePairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC20BridgePairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC20BridgePairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC20BridgePairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC20BridgePairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ERC20BridgePairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ERC20BridgePairs = append(m.ERC20BridgePairs, ERC20BridgePair{})
			if err := m.ERC20BridgePairs[len(m.ERC20BridgePairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC20BridgePairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC20BridgePairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC20BridgePairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryERC20BridgePairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryERC20BridgePairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryERC20BridgePairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ERC20BridgePair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ERC20BridgePair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversionPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversionPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversionPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversionPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversionPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversionPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversionPairs = append(m.ConversionPairs, ConversionPair{})
			if err := m.ConversionPairs[len(m.ConversionPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversionPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversionPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversionPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressOrDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressOrDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversionPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversionPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversionPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConversionPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
