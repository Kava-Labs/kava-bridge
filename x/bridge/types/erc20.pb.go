// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta1/erc20.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ERC20BridgePair defines an ERC20 token bridged between external and Kava EVM
type ERC20BridgePair struct {
	// external_erc20_address represents the external EVM ERC20 address
	ExternalERC20Address HexBytes `protobuf:"bytes,1,opt,name=external_erc20_address,json=externalErc20Address,proto3,casttype=HexBytes" json:"external_erc20_address,omitempty"`
	// internal_erc20_address represents the corresponding internal Kava EVM ERC20 address
	InternalERC20Address HexBytes `protobuf:"bytes,2,opt,name=internal_erc20_address,json=internalErc20Address,proto3,casttype=HexBytes" json:"internal_erc20_address,omitempty"`
}

func (m *ERC20BridgePair) Reset()         { *m = ERC20BridgePair{} }
func (m *ERC20BridgePair) String() string { return proto.CompactTextString(m) }
func (*ERC20BridgePair) ProtoMessage()    {}
func (*ERC20BridgePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_404f73620686b5c2, []int{0}
}
func (m *ERC20BridgePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20BridgePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20BridgePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20BridgePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20BridgePair.Merge(m, src)
}
func (m *ERC20BridgePair) XXX_Size() int {
	return m.Size()
}
func (m *ERC20BridgePair) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20BridgePair.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20BridgePair proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ERC20BridgePair)(nil), "bridge.v1beta1.ERC20BridgePair")
}

func init() { proto.RegisterFile("bridge/v1beta1/erc20.proto", fileDescriptor_404f73620686b5c2) }

var fileDescriptor_404f73620686b5c2 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x2a, 0xca, 0x4c,
	0x49, 0x4f, 0xd5, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34, 0xd4, 0x4f, 0x2d, 0x4a, 0x36, 0x32,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x83, 0xc8, 0xe9, 0x41, 0xe5, 0xa4, 0x44, 0xd2,
	0xf3, 0xd3, 0xf3, 0xc1, 0x52, 0xfa, 0x20, 0x16, 0x44, 0x95, 0xd2, 0x79, 0x46, 0x2e, 0x7e, 0xd7,
	0x20, 0x67, 0x23, 0x03, 0x27, 0xb0, 0xea, 0x80, 0xc4, 0xcc, 0x22, 0xa1, 0x28, 0x2e, 0xb1, 0xd4,
	0x8a, 0x92, 0xd4, 0xa2, 0xbc, 0xc4, 0x9c, 0x78, 0xb0, 0x89, 0xf1, 0x89, 0x29, 0x29, 0x45, 0xa9,
	0xc5, 0xc5, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x4e, 0x2a, 0x8f, 0xee, 0xc9, 0x8b, 0xb8, 0x42,
	0x55, 0x80, 0x35, 0x3b, 0x42, 0xe4, 0x7f, 0xdd, 0x93, 0xe7, 0xf0, 0x48, 0xad, 0x70, 0xaa, 0x2c,
	0x49, 0x2d, 0x0e, 0x12, 0x81, 0x99, 0xe1, 0x0a, 0x32, 0x02, 0xaa, 0x02, 0x64, 0x76, 0x66, 0x1e,
	0x56, 0xb3, 0x99, 0x10, 0x66, 0x7b, 0xe6, 0x11, 0x32, 0x1b, 0x66, 0x06, 0xb2, 0xd9, 0x56, 0x2c,
	0x1d, 0x0b, 0xe4, 0x19, 0x9c, 0x02, 0x1f, 0x3c, 0x94, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4,
	0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1,
	0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xf4, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93,
	0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xb3, 0x13, 0xcb, 0x12, 0x75, 0x73, 0x12, 0x93, 0x8a, 0x21, 0x2c,
	0x68, 0x78, 0x56, 0xe8, 0x43, 0x19, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0xb0, 0x32,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x48, 0x05, 0x0d, 0x6f, 0x01, 0x00, 0x00,
}

func (this *ERC20BridgePair) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ERC20BridgePair)
	if !ok {
		that2, ok := that.(ERC20BridgePair)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ERC20BridgePair")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ERC20BridgePair but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ERC20BridgePair but is not nil && this == nil")
	}
	if !bytes.Equal(this.ExternalERC20Address, that1.ExternalERC20Address) {
		return fmt.Errorf("ExternalERC20Address this(%v) Not Equal that(%v)", this.ExternalERC20Address, that1.ExternalERC20Address)
	}
	if !bytes.Equal(this.InternalERC20Address, that1.InternalERC20Address) {
		return fmt.Errorf("InternalERC20Address this(%v) Not Equal that(%v)", this.InternalERC20Address, that1.InternalERC20Address)
	}
	return nil
}
func (this *ERC20BridgePair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ERC20BridgePair)
	if !ok {
		that2, ok := that.(ERC20BridgePair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ExternalERC20Address, that1.ExternalERC20Address) {
		return false
	}
	if !bytes.Equal(this.InternalERC20Address, that1.InternalERC20Address) {
		return false
	}
	return true
}
func (m *ERC20BridgePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20BridgePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20BridgePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InternalERC20Address) > 0 {
		i -= len(m.InternalERC20Address)
		copy(dAtA[i:], m.InternalERC20Address)
		i = encodeVarintErc20(dAtA, i, uint64(len(m.InternalERC20Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExternalERC20Address) > 0 {
		i -= len(m.ExternalERC20Address)
		copy(dAtA[i:], m.ExternalERC20Address)
		i = encodeVarintErc20(dAtA, i, uint64(len(m.ExternalERC20Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintErc20(dAtA []byte, offset int, v uint64) int {
	offset -= sovErc20(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ERC20BridgePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalERC20Address)
	if l > 0 {
		n += 1 + l + sovErc20(uint64(l))
	}
	l = len(m.InternalERC20Address)
	if l > 0 {
		n += 1 + l + sovErc20(uint64(l))
	}
	return n
}

func sovErc20(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErc20(x uint64) (n int) {
	return sovErc20(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ERC20BridgePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErc20
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20BridgePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20BridgePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalERC20Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErc20
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthErc20
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalERC20Address = append(m.ExternalERC20Address[:0], dAtA[iNdEx:postIndex]...)
			if m.ExternalERC20Address == nil {
				m.ExternalERC20Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalERC20Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErc20
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthErc20
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalERC20Address = append(m.InternalERC20Address[:0], dAtA[iNdEx:postIndex]...)
			if m.InternalERC20Address == nil {
				m.InternalERC20Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErc20(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErc20
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErc20(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErc20
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErc20
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErc20
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErc20
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErc20        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErc20          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErc20 = fmt.Errorf("proto: unexpected end of group")
)
