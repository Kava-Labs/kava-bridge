// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgBridgeEthereumToKava defines a ERC20 bridge transfer from Ethereum to Kava.
type MsgBridgeEthereumToKava struct {
	// Address of the bridge relayer
	Relayer string `protobuf:"bytes,1,opt,name=relayer,proto3" json:"relayer,omitempty"`
	// Originating Ethereum ERC20 contract address
	EthereumERC20Address string `protobuf:"bytes,2,opt,name=ethereum_erc20_address,json=ethereumErc20Address,proto3" json:"ethereum_erc20_address,omitempty"`
	// ERC20 token amount to transfer
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	// Receiver hex address on Kava
	Receiver string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Unique sequence per bridge event
	Sequence github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=sequence,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sequence"`
}

func (m *MsgBridgeEthereumToKava) Reset()         { *m = MsgBridgeEthereumToKava{} }
func (m *MsgBridgeEthereumToKava) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeEthereumToKava) ProtoMessage()    {}
func (*MsgBridgeEthereumToKava) Descriptor() ([]byte, []int) {
	return fileDescriptor_e83acf120314329f, []int{0}
}
func (m *MsgBridgeEthereumToKava) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeEthereumToKava) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeEthereumToKava.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeEthereumToKava) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeEthereumToKava.Merge(m, src)
}
func (m *MsgBridgeEthereumToKava) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeEthereumToKava) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeEthereumToKava.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeEthereumToKava proto.InternalMessageInfo

func (m *MsgBridgeEthereumToKava) GetRelayer() string {
	if m != nil {
		return m.Relayer
	}
	return ""
}

func (m *MsgBridgeEthereumToKava) GetEthereumERC20Address() string {
	if m != nil {
		return m.EthereumERC20Address
	}
	return ""
}

func (m *MsgBridgeEthereumToKava) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

// MsgBridgeEthereumToKavaResponse defines the response value from
type MsgBridgeEthereumToKavaResponse struct {
}

func (m *MsgBridgeEthereumToKavaResponse) Reset()         { *m = MsgBridgeEthereumToKavaResponse{} }
func (m *MsgBridgeEthereumToKavaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeEthereumToKavaResponse) ProtoMessage()    {}
func (*MsgBridgeEthereumToKavaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e83acf120314329f, []int{1}
}
func (m *MsgBridgeEthereumToKavaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeEthereumToKavaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeEthereumToKavaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeEthereumToKavaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeEthereumToKavaResponse.Merge(m, src)
}
func (m *MsgBridgeEthereumToKavaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeEthereumToKavaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeEthereumToKavaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeEthereumToKavaResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgBridgeEthereumToKava)(nil), "bridge.v1beta1.MsgBridgeEthereumToKava")
	proto.RegisterType((*MsgBridgeEthereumToKavaResponse)(nil), "bridge.v1beta1.MsgBridgeEthereumToKavaResponse")
}

func init() { proto.RegisterFile("bridge/v1beta1/tx.proto", fileDescriptor_e83acf120314329f) }

var fileDescriptor_e83acf120314329f = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x3f, 0x8e, 0xd3, 0x40,
	0x14, 0xc6, 0xed, 0x5d, 0x58, 0x96, 0x29, 0x28, 0x2c, 0x8b, 0x35, 0x2e, 0xc6, 0xb0, 0x05, 0xd0,
	0xd8, 0xde, 0x35, 0x2d, 0x0d, 0x41, 0x29, 0x22, 0x14, 0x24, 0x4c, 0x0a, 0x44, 0x13, 0x8d, 0xed,
	0x27, 0xc7, 0x4a, 0xec, 0x31, 0x33, 0x63, 0x93, 0xdc, 0x82, 0x63, 0x70, 0x80, 0x1c, 0x22, 0x65,
	0x94, 0x0a, 0x51, 0x44, 0xc1, 0xa9, 0xb8, 0x05, 0x8a, 0x67, 0x1c, 0x81, 0x44, 0x24, 0x0a, 0x2a,
	0xbf, 0xf1, 0xf7, 0x7d, 0xbf, 0x37, 0x7f, 0x1e, 0xba, 0x8a, 0x58, 0x96, 0xa4, 0xe0, 0xd7, 0xb7,
	0x11, 0x08, 0x72, 0xeb, 0x8b, 0xb9, 0x57, 0x32, 0x2a, 0xa8, 0xf1, 0x40, 0x0a, 0x9e, 0x12, 0x6c,
	0x33, 0xa5, 0x29, 0x6d, 0x25, 0xff, 0x50, 0x49, 0x97, 0xfd, 0x28, 0xa6, 0x3c, 0xa7, 0x7c, 0x2c,
	0x05, 0xb9, 0x90, 0xd2, 0xf5, 0xcf, 0x33, 0x74, 0x35, 0xe4, 0x69, 0xaf, 0xc5, 0xf4, 0xc5, 0x04,
	0x18, 0x54, 0xf9, 0x88, 0xbe, 0x21, 0x35, 0x31, 0x02, 0x74, 0x8f, 0xc1, 0x8c, 0x2c, 0x80, 0x59,
	0xfa, 0x63, 0xfd, 0xf9, 0xfd, 0x9e, 0xb5, 0x59, 0xba, 0xa6, 0x8a, 0xbf, 0x4a, 0x12, 0x06, 0x9c,
	0xbf, 0x17, 0x2c, 0x2b, 0xd2, 0xb0, 0x33, 0x1a, 0x6f, 0xd1, 0x43, 0x50, 0x94, 0x31, 0xb0, 0x38,
	0xb8, 0x19, 0x13, 0x69, 0xb4, 0xce, 0x24, 0xa2, 0xd9, 0x3a, 0x66, 0xd7, 0xa7, 0x1f, 0xbe, 0x0e,
	0x6e, 0x14, 0x28, 0x34, 0xbb, 0x5c, 0xff, 0x10, 0x53, 0x7f, 0x8d, 0x11, 0xba, 0x20, 0x39, 0xad,
	0x0a, 0x61, 0x9d, 0xb7, 0xf9, 0x97, 0xab, 0xad, 0xa3, 0x7d, 0xdf, 0x3a, 0x4f, 0xd3, 0x4c, 0x4c,
	0xaa, 0xc8, 0x8b, 0x69, 0xae, 0x0e, 0xa4, 0x3e, 0x2e, 0x4f, 0xa6, 0xbe, 0x58, 0x94, 0xc0, 0xbd,
	0x41, 0x21, 0x36, 0x4b, 0x17, 0xa9, 0x0d, 0x0f, 0x0a, 0x11, 0x2a, 0x96, 0x61, 0xa3, 0x4b, 0x06,
	0x31, 0x64, 0x35, 0x30, 0xeb, 0xce, 0x81, 0x1b, 0x1e, 0xd7, 0xc6, 0x07, 0x74, 0xc9, 0xe1, 0x53,
	0x05, 0x45, 0x0c, 0xd6, 0xdd, 0xff, 0xd0, 0xf3, 0x48, 0xbb, 0x7e, 0x82, 0x9c, 0x13, 0x57, 0x1d,
	0x02, 0x2f, 0x69, 0xc1, 0x21, 0xf8, 0x8c, 0xce, 0x87, 0x3c, 0x35, 0x4a, 0x64, 0xfe, 0xf5, 0x45,
	0x9e, 0x79, 0x7f, 0xbe, 0xb7, 0x77, 0x82, 0x67, 0xfb, 0xff, 0x68, 0xec, 0x1a, 0xf7, 0xde, 0xed,
	0x7e, 0x60, 0xfd, 0x6b, 0x83, 0xf5, 0x55, 0x83, 0xf5, 0x75, 0x83, 0xf5, 0x5d, 0x83, 0xf5, 0x2f,
	0x7b, 0xac, 0xad, 0xf7, 0x58, 0xfb, 0xb6, 0xc7, 0xda, 0x47, 0xff, 0xb7, 0xd3, 0x4f, 0x49, 0x4d,
	0xdc, 0x19, 0x89, 0xb8, 0xac, 0xd4, 0x74, 0xce, 0x7d, 0x55, 0xb4, 0x57, 0x11, 0x5d, 0xb4, 0x13,
	0xf6, 0xe2, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x1d, 0xe2, 0x5f, 0xbd, 0x02, 0x00, 0x00,
}

func (this *MsgBridgeEthereumToKava) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MsgBridgeEthereumToKava)
	if !ok {
		that2, ok := that.(MsgBridgeEthereumToKava)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MsgBridgeEthereumToKava")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MsgBridgeEthereumToKava but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MsgBridgeEthereumToKava but is not nil && this == nil")
	}
	if this.Relayer != that1.Relayer {
		return fmt.Errorf("Relayer this(%v) Not Equal that(%v)", this.Relayer, that1.Relayer)
	}
	if this.EthereumERC20Address != that1.EthereumERC20Address {
		return fmt.Errorf("EthereumERC20Address this(%v) Not Equal that(%v)", this.EthereumERC20Address, that1.EthereumERC20Address)
	}
	if !this.Amount.Equal(that1.Amount) {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", this.Amount, that1.Amount)
	}
	if this.Receiver != that1.Receiver {
		return fmt.Errorf("Receiver this(%v) Not Equal that(%v)", this.Receiver, that1.Receiver)
	}
	if !this.Sequence.Equal(that1.Sequence) {
		return fmt.Errorf("Sequence this(%v) Not Equal that(%v)", this.Sequence, that1.Sequence)
	}
	return nil
}
func (this *MsgBridgeEthereumToKava) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBridgeEthereumToKava)
	if !ok {
		that2, ok := that.(MsgBridgeEthereumToKava)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Relayer != that1.Relayer {
		return false
	}
	if this.EthereumERC20Address != that1.EthereumERC20Address {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.Receiver != that1.Receiver {
		return false
	}
	if !this.Sequence.Equal(that1.Sequence) {
		return false
	}
	return true
}
func (this *MsgBridgeEthereumToKavaResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MsgBridgeEthereumToKavaResponse)
	if !ok {
		that2, ok := that.(MsgBridgeEthereumToKavaResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MsgBridgeEthereumToKavaResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MsgBridgeEthereumToKavaResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MsgBridgeEthereumToKavaResponse but is not nil && this == nil")
	}
	return nil
}
func (this *MsgBridgeEthereumToKavaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBridgeEthereumToKavaResponse)
	if !ok {
		that2, ok := that.(MsgBridgeEthereumToKavaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// BridgeEthereumToKava defines a method for bridging ERC20 tokens from
	// Ethereum to Kava.
	BridgeEthereumToKava(ctx context.Context, in *MsgBridgeEthereumToKava, opts ...grpc.CallOption) (*MsgBridgeEthereumToKavaResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BridgeEthereumToKava(ctx context.Context, in *MsgBridgeEthereumToKava, opts ...grpc.CallOption) (*MsgBridgeEthereumToKavaResponse, error) {
	out := new(MsgBridgeEthereumToKavaResponse)
	err := c.cc.Invoke(ctx, "/bridge.v1beta1.Msg/BridgeEthereumToKava", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// BridgeEthereumToKava defines a method for bridging ERC20 tokens from
	// Ethereum to Kava.
	BridgeEthereumToKava(context.Context, *MsgBridgeEthereumToKava) (*MsgBridgeEthereumToKavaResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BridgeEthereumToKava(ctx context.Context, req *MsgBridgeEthereumToKava) (*MsgBridgeEthereumToKavaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeEthereumToKava not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BridgeEthereumToKava_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBridgeEthereumToKava)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BridgeEthereumToKava(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.v1beta1.Msg/BridgeEthereumToKava",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BridgeEthereumToKava(ctx, req.(*MsgBridgeEthereumToKava))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BridgeEthereumToKava",
			Handler:    _Msg_BridgeEthereumToKava_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/v1beta1/tx.proto",
}

func (m *MsgBridgeEthereumToKava) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeEthereumToKava) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeEthereumToKava) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Sequence.Size()
		i -= size
		if _, err := m.Sequence.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EthereumERC20Address) > 0 {
		i -= len(m.EthereumERC20Address)
		copy(dAtA[i:], m.EthereumERC20Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EthereumERC20Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Relayer) > 0 {
		i -= len(m.Relayer)
		copy(dAtA[i:], m.Relayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Relayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeEthereumToKavaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeEthereumToKavaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeEthereumToKavaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBridgeEthereumToKava) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Relayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EthereumERC20Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Sequence.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBridgeEthereumToKavaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBridgeEthereumToKava) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeEthereumToKava: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeEthereumToKava: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumERC20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumERC20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sequence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeEthereumToKavaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeEthereumToKavaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeEthereumToKavaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
