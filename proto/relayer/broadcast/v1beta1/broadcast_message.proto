syntax = "proto3";
package relayer.v1beta1;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/kava-labs/kava-bridge/relayer/broadcast/types";

// BroadcastMessage is sent to other peers in the recipient list when a peer
// wants to broadcast a new message.
message BroadcastMessage {
  // Unique ID of this message.
  string id = 1 [(gogoproto.customname) = "ID"];
  // Selected recipients of the message, to partially restrict the broadcast to
  // a subset a peers.
  repeated string recipient_peer_ids = 2 [
    (gogoproto.customtype) = "github.com/libp2p/go-libp2p-core/peer.ID",
    (gogoproto.customname) = "RecipientPeerIDs"
  ];
  // Customtype workaround for not having to use a separate protocgen.sh script
  google.protobuf.Any payload = 3
      [(gogoproto.nullable) = false, (gogoproto.customtype) = "github.com/gogo/protobuf/types.Any"];
  // Timestamp when the message was broadcasted.
  google.protobuf.Timestamp created = 4 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  // Seconds after created time until the message expires. This requires
  // roughly synced times between peers
  uint64 ttl_seconds = 5 [(gogoproto.customname) = "TTLSeconds"];
}

message HelloRequest {
  string message = 1;
}

// HashMsg is sent when a peer receives a broadcasted message and re-broadcasts
// a hash of the broadcast message to other (non-broadcaster) peers.
message HashMsg {
  option (gogoproto.goproto_getters) = false;

  // Message ID this hash is for.
  string message_id = 1 [(gogoproto.customname) = "MessageID"];
  // SHA3 256 hash of the message.
  bytes hash = 2;
}
