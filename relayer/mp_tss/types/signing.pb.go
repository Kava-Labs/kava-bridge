// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/tss/v1beta1/signing.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_libp2p_go_libp2p_core_peer "github.com/libp2p/go-libp2p-core/peer"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SigningPartyStartMessage struct {
	// Hash of the transaction that initiated the signing session.
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Aggregated party session ID.
	SessionId []byte `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The peer IDs of the parties involved in the signing session.
	ParticipatingPeerIDs []github_com_libp2p_go_libp2p_core_peer.ID `protobuf:"bytes,3,rep,name=participating_peer_ids,json=participatingPeerIds,proto3,customtype=github.com/libp2p/go-libp2p-core/peer.ID" json:"participating_peer_ids,omitempty"`
}

func (m *SigningPartyStartMessage) Reset()         { *m = SigningPartyStartMessage{} }
func (m *SigningPartyStartMessage) String() string { return proto.CompactTextString(m) }
func (*SigningPartyStartMessage) ProtoMessage()    {}
func (*SigningPartyStartMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_943a767a50ef91e6, []int{0}
}
func (m *SigningPartyStartMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningPartyStartMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningPartyStartMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningPartyStartMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningPartyStartMessage.Merge(m, src)
}
func (m *SigningPartyStartMessage) XXX_Size() int {
	return m.Size()
}
func (m *SigningPartyStartMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningPartyStartMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SigningPartyStartMessage proto.InternalMessageInfo

// SigningPartMessage is an outgoing message from lib-tss.
type SigningPartMessage struct {
	// Signing party session ID.
	SessionID []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Bytes from lib-tss to send.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// If this message is broadcasted to all session peers.
	IsBroadcast bool `protobuf:"varint,3,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
}

func (m *SigningPartMessage) Reset()         { *m = SigningPartMessage{} }
func (m *SigningPartMessage) String() string { return proto.CompactTextString(m) }
func (*SigningPartMessage) ProtoMessage()    {}
func (*SigningPartMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_943a767a50ef91e6, []int{1}
}
func (m *SigningPartMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningPartMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningPartMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningPartMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningPartMessage.Merge(m, src)
}
func (m *SigningPartMessage) XXX_Size() int {
	return m.Size()
}
func (m *SigningPartMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningPartMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SigningPartMessage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SigningPartyStartMessage)(nil), "tss.v1beta1.SigningPartyStartMessage")
	proto.RegisterType((*SigningPartMessage)(nil), "tss.v1beta1.SigningPartMessage")
}

func init() { proto.RegisterFile("relayer/tss/v1beta1/signing.proto", fileDescriptor_943a767a50ef91e6) }

var fileDescriptor_943a767a50ef91e6 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x0a, 0xd3, 0x40,
	0x18, 0xc4, 0x13, 0x2b, 0xd5, 0x6e, 0xeb, 0x25, 0x14, 0x0d, 0x82, 0xe9, 0x9f, 0x53, 0x0e, 0x36,
	0x4b, 0x15, 0x5f, 0x20, 0xe4, 0x60, 0x0f, 0x42, 0x69, 0x6e, 0x5e, 0xc2, 0x97, 0x64, 0xd9, 0x2c,
	0xb6, 0xd9, 0x65, 0xbf, 0xb5, 0x34, 0x3e, 0x85, 0x8f, 0xd5, 0x93, 0xf4, 0x28, 0x1e, 0x8a, 0xa6,
	0x2f, 0x22, 0x4d, 0x52, 0x88, 0x78, 0x1b, 0xe6, 0xdb, 0x59, 0xe6, 0xc7, 0x90, 0x85, 0x66, 0x7b,
	0xa8, 0x98, 0xa6, 0x06, 0x91, 0x1e, 0xd7, 0x29, 0x33, 0xb0, 0xa6, 0x28, 0x78, 0x29, 0x4a, 0x1e,
	0x28, 0x2d, 0x8d, 0x74, 0xc6, 0x06, 0x31, 0xe8, 0x4e, 0xaf, 0xa7, 0x5c, 0x72, 0xd9, 0xf8, 0xf4,
	0xae, 0xda, 0x27, 0xcb, 0x1f, 0x36, 0x71, 0xe3, 0x36, 0xb4, 0x05, 0x6d, 0xaa, 0xd8, 0x80, 0x36,
	0x9f, 0x18, 0x22, 0x70, 0xe6, 0xbc, 0x22, 0xcf, 0xcc, 0x29, 0x29, 0x00, 0x0b, 0xd7, 0x9e, 0xdb,
	0xfe, 0x64, 0x37, 0x34, 0xa7, 0x8f, 0x80, 0x85, 0xf3, 0x86, 0x10, 0x64, 0x88, 0x42, 0x96, 0x89,
	0xc8, 0xdd, 0x27, 0xcd, 0x6d, 0xd4, 0x39, 0x9b, 0xdc, 0xf9, 0x46, 0x5e, 0x2a, 0xd0, 0x46, 0x64,
	0x42, 0x81, 0x11, 0x25, 0x4f, 0x14, 0x63, 0x3a, 0x11, 0x39, 0xba, 0x83, 0xf9, 0xc0, 0x1f, 0x85,
	0xd1, 0xaf, 0xeb, 0xcc, 0xe7, 0xc2, 0x14, 0x5f, 0xd3, 0x20, 0x93, 0x07, 0xba, 0x17, 0xa9, 0x7a,
	0xa7, 0x28, 0x97, 0xab, 0x56, 0xad, 0x32, 0xa9, 0x19, 0xbd, 0x87, 0x82, 0x4d, 0x54, 0x5f, 0x67,
	0xd3, 0x6d, 0xff, 0xb7, 0x2d, 0x63, 0x7a, 0x13, 0xe1, 0x6e, 0xaa, 0xfe, 0x73, 0x73, 0x5c, 0x56,
	0xc4, 0xe9, 0xf1, 0x3c, 0x48, 0xde, 0xfe, 0x53, 0xb8, 0x81, 0x09, 0x5f, 0xd4, 0xd7, 0xd9, 0x28,
	0xee, 0x4a, 0x47, 0xfd, 0xfe, 0x0e, 0x79, 0x9a, 0x83, 0x81, 0x0e, 0xac, 0xd1, 0xce, 0x82, 0x4c,
	0x04, 0x26, 0xa9, 0x96, 0x90, 0x67, 0x80, 0xc6, 0x1d, 0xcc, 0x6d, 0xff, 0xf9, 0x6e, 0x2c, 0x30,
	0x7c, 0x58, 0x61, 0x7c, 0xfe, 0xe3, 0x59, 0xe7, 0xda, 0xb3, 0x2f, 0xb5, 0x67, 0xff, 0xae, 0x3d,
	0xfb, 0xfb, 0xcd, 0xb3, 0x2e, 0x37, 0xcf, 0xfa, 0x79, 0xf3, 0xac, 0xcf, 0x1f, 0x7a, 0xc0, 0x5f,
	0xe0, 0x08, 0xab, 0x3d, 0xa4, 0xd8, 0xaa, 0x54, 0x8b, 0x9c, 0x33, 0xfa, 0x18, 0xf4, 0xa0, 0x92,
	0xfb, 0xa6, 0xa6, 0x52, 0x0c, 0xd3, 0x61, 0xb3, 0xd3, 0xfb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x4d, 0x92, 0xa9, 0x51, 0xef, 0x01, 0x00, 0x00,
}

func (m *SigningPartyStartMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningPartyStartMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningPartyStartMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParticipatingPeerIDs) > 0 {
		for iNdEx := len(m.ParticipatingPeerIDs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.ParticipatingPeerIDs[iNdEx].Size()
				i -= size
				if _, err := m.ParticipatingPeerIDs[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintSigning(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningPartMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningPartMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningPartMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBroadcast {
		i--
		if m.IsBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintSigning(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSigning(dAtA []byte, offset int, v uint64) int {
	offset -= sovSigning(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigningPartyStartMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	if len(m.ParticipatingPeerIDs) > 0 {
		for _, e := range m.ParticipatingPeerIDs {
			l = e.Size()
			n += 1 + l + sovSigning(uint64(l))
		}
	}
	return n
}

func (m *SigningPartMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSigning(uint64(l))
	}
	if m.IsBroadcast {
		n += 2
	}
	return n
}

func sovSigning(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSigning(x uint64) (n int) {
	return sovSigning(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigningPartyStartMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningPartyStartMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningPartyStartMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = append(m.SessionId[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionId == nil {
				m.SessionId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipatingPeerIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_libp2p_go_libp2p_core_peer.ID
			m.ParticipatingPeerIDs = append(m.ParticipatingPeerIDs, v)
			if err := m.ParticipatingPeerIDs[len(m.ParticipatingPeerIDs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningPartMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigning
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningPartMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningPartMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = append(m.SessionID[:0], dAtA[iNdEx:postIndex]...)
			if m.SessionID == nil {
				m.SessionID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigning
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigning
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBroadcast = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSigning(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSigning
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigning(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigning
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigning
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSigning
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSigning
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSigning
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSigning        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigning          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSigning = fmt.Errorf("proto: unexpected end of group")
)
