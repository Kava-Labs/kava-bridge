// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: relayer/tss/v1beta1/join_session.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// JoinSessionMessage is used to create a new signing session.
type JoinSessionMessage struct {
	// Types that are valid to be assigned to Session:
	//	*JoinSessionMessage_JoinSigningSessionMessage
	//	*JoinSessionMessage_JoinKeygenSessionMessage
	//	*JoinSessionMessage_JoinResharingSessionMessage
	Session isJoinSessionMessage_Session `protobuf_oneof:"session"`
}

func (m *JoinSessionMessage) Reset()         { *m = JoinSessionMessage{} }
func (m *JoinSessionMessage) String() string { return proto.CompactTextString(m) }
func (*JoinSessionMessage) ProtoMessage()    {}
func (*JoinSessionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5a0677ae04bb2c7, []int{0}
}
func (m *JoinSessionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinSessionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinSessionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinSessionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinSessionMessage.Merge(m, src)
}
func (m *JoinSessionMessage) XXX_Size() int {
	return m.Size()
}
func (m *JoinSessionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinSessionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinSessionMessage proto.InternalMessageInfo

type isJoinSessionMessage_Session interface {
	isJoinSessionMessage_Session()
	MarshalTo([]byte) (int, error)
	Size() int
}

type JoinSessionMessage_JoinSigningSessionMessage struct {
	JoinSigningSessionMessage *JoinSigningSessionMessage `protobuf:"bytes,1,opt,name=join_signing_session_message,json=joinSigningSessionMessage,proto3,oneof" json:"join_signing_session_message,omitempty"`
}
type JoinSessionMessage_JoinKeygenSessionMessage struct {
	JoinKeygenSessionMessage *JoinKeygenSessionMessage `protobuf:"bytes,2,opt,name=join_keygen_session_message,json=joinKeygenSessionMessage,proto3,oneof" json:"join_keygen_session_message,omitempty"`
}
type JoinSessionMessage_JoinResharingSessionMessage struct {
	JoinResharingSessionMessage *JoinReSharingSessionMessage `protobuf:"bytes,3,opt,name=join_resharing_session_message,json=joinResharingSessionMessage,proto3,oneof" json:"join_resharing_session_message,omitempty"`
}

func (*JoinSessionMessage_JoinSigningSessionMessage) isJoinSessionMessage_Session()   {}
func (*JoinSessionMessage_JoinKeygenSessionMessage) isJoinSessionMessage_Session()    {}
func (*JoinSessionMessage_JoinResharingSessionMessage) isJoinSessionMessage_Session() {}

func (m *JoinSessionMessage) GetSession() isJoinSessionMessage_Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *JoinSessionMessage) GetJoinSigningSessionMessage() *JoinSigningSessionMessage {
	if x, ok := m.GetSession().(*JoinSessionMessage_JoinSigningSessionMessage); ok {
		return x.JoinSigningSessionMessage
	}
	return nil
}

func (m *JoinSessionMessage) GetJoinKeygenSessionMessage() *JoinKeygenSessionMessage {
	if x, ok := m.GetSession().(*JoinSessionMessage_JoinKeygenSessionMessage); ok {
		return x.JoinKeygenSessionMessage
	}
	return nil
}

func (m *JoinSessionMessage) GetJoinResharingSessionMessage() *JoinReSharingSessionMessage {
	if x, ok := m.GetSession().(*JoinSessionMessage_JoinResharingSessionMessage); ok {
		return x.JoinResharingSessionMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JoinSessionMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JoinSessionMessage_JoinSigningSessionMessage)(nil),
		(*JoinSessionMessage_JoinKeygenSessionMessage)(nil),
		(*JoinSessionMessage_JoinResharingSessionMessage)(nil),
	}
}

// JoinSigningSessionMessage is used to create and join a new signing session.
type JoinSigningSessionMessage struct {
	// Hash of the transaction that initiated the signing session.
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// Random bytes different per peer to create an aggregated party session ID.
	PeerSessionIDPart []byte `protobuf:"bytes,2,opt,name=peer_session_id_part,json=peerSessionIdPart,proto3" json:"peer_session_id_part,omitempty"`
}

func (m *JoinSigningSessionMessage) Reset()         { *m = JoinSigningSessionMessage{} }
func (m *JoinSigningSessionMessage) String() string { return proto.CompactTextString(m) }
func (*JoinSigningSessionMessage) ProtoMessage()    {}
func (*JoinSigningSessionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5a0677ae04bb2c7, []int{1}
}
func (m *JoinSigningSessionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinSigningSessionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinSigningSessionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinSigningSessionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinSigningSessionMessage.Merge(m, src)
}
func (m *JoinSigningSessionMessage) XXX_Size() int {
	return m.Size()
}
func (m *JoinSigningSessionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinSigningSessionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinSigningSessionMessage proto.InternalMessageInfo

// JoinKeygenSessionMessage is used to create and join a new keygen session.
type JoinKeygenSessionMessage struct {
	// Shared session ID, same for all peers.
	KeygenSessionID []byte `protobuf:"bytes,1,opt,name=keygen_session_id,json=keygenSessionId,proto3" json:"keygen_session_id,omitempty"`
}

func (m *JoinKeygenSessionMessage) Reset()         { *m = JoinKeygenSessionMessage{} }
func (m *JoinKeygenSessionMessage) String() string { return proto.CompactTextString(m) }
func (*JoinKeygenSessionMessage) ProtoMessage()    {}
func (*JoinKeygenSessionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5a0677ae04bb2c7, []int{2}
}
func (m *JoinKeygenSessionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinKeygenSessionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinKeygenSessionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinKeygenSessionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinKeygenSessionMessage.Merge(m, src)
}
func (m *JoinKeygenSessionMessage) XXX_Size() int {
	return m.Size()
}
func (m *JoinKeygenSessionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinKeygenSessionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinKeygenSessionMessage proto.InternalMessageInfo

// JoinReSharingSessionMessage is used to create and join a new resharing session.
type JoinReSharingSessionMessage struct {
	// Shared session ID, same for all peers.
	ReSharingSessionID []byte `protobuf:"bytes,1,opt,name=resharing_session_id,json=resharingSessionId,proto3" json:"resharing_session_id,omitempty"`
}

func (m *JoinReSharingSessionMessage) Reset()         { *m = JoinReSharingSessionMessage{} }
func (m *JoinReSharingSessionMessage) String() string { return proto.CompactTextString(m) }
func (*JoinReSharingSessionMessage) ProtoMessage()    {}
func (*JoinReSharingSessionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5a0677ae04bb2c7, []int{3}
}
func (m *JoinReSharingSessionMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinReSharingSessionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinReSharingSessionMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinReSharingSessionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinReSharingSessionMessage.Merge(m, src)
}
func (m *JoinReSharingSessionMessage) XXX_Size() int {
	return m.Size()
}
func (m *JoinReSharingSessionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinReSharingSessionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JoinReSharingSessionMessage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*JoinSessionMessage)(nil), "tss.v1beta1.JoinSessionMessage")
	proto.RegisterType((*JoinSigningSessionMessage)(nil), "tss.v1beta1.JoinSigningSessionMessage")
	proto.RegisterType((*JoinKeygenSessionMessage)(nil), "tss.v1beta1.JoinKeygenSessionMessage")
	proto.RegisterType((*JoinReSharingSessionMessage)(nil), "tss.v1beta1.JoinReSharingSessionMessage")
}

func init() {
	proto.RegisterFile("relayer/tss/v1beta1/join_session.proto", fileDescriptor_c5a0677ae04bb2c7)
}

var fileDescriptor_c5a0677ae04bb2c7 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x93, 0x0a, 0x2d, 0x4e, 0x0b, 0x65, 0xc7, 0x55, 0xb7, 0x56, 0x66, 0x25, 0x60, 0xe9,
	0xc5, 0x84, 0x2a, 0x9e, 0x85, 0xb0, 0xc8, 0x46, 0x11, 0x4a, 0xf6, 0xa6, 0x87, 0x30, 0x31, 0xcf,
	0xc9, 0xec, 0x76, 0x33, 0x61, 0x66, 0x2c, 0x5d, 0xf0, 0x43, 0xf8, 0xb1, 0x7a, 0xec, 0xd1, 0xd3,
	0xa2, 0xc9, 0x17, 0x91, 0x9d, 0xd9, 0x2d, 0x9b, 0x8d, 0xf1, 0x36, 0xbc, 0xff, 0x7b, 0xff, 0xdf,
	0x9b, 0x3f, 0x3c, 0x74, 0x26, 0xe1, 0x8a, 0x2e, 0x40, 0x06, 0x5a, 0xa9, 0xe0, 0xfa, 0x22, 0x05,
	0x4d, 0x2f, 0x82, 0xa9, 0xe0, 0x45, 0xa2, 0x40, 0x29, 0x2e, 0x0a, 0xbf, 0x94, 0x42, 0x0b, 0x7c,
	0xa8, 0x95, 0xf2, 0xd7, 0xfa, 0xb3, 0x3e, 0x13, 0x4c, 0x98, 0x7a, 0xb0, 0x7a, 0xd9, 0x16, 0xaf,
	0xde, 0x43, 0xf8, 0x83, 0xe0, 0xc5, 0xc4, 0x0e, 0x7e, 0x02, 0xa5, 0x28, 0x03, 0xcc, 0xd1, 0x73,
	0xeb, 0xc7, 0x59, 0xc1, 0x0b, 0xb6, 0xf1, 0x4d, 0xe6, 0x56, 0x1f, 0xb8, 0x2f, 0xdc, 0xf3, 0xc3,
	0xd7, 0x67, 0xfe, 0x16, 0xc0, 0x37, 0x36, 0xb6, 0xbf, 0xe9, 0x36, 0x76, 0xe2, 0x93, 0x69, 0x97,
	0x88, 0xbf, 0xa1, 0x53, 0x83, 0x9a, 0xc1, 0x82, 0x41, 0xd1, 0x22, 0xed, 0x19, 0xd2, 0xcb, 0x16,
	0xe9, 0xa3, 0x69, 0x6f, 0x81, 0x06, 0xd3, 0x0e, 0x0d, 0x0b, 0x44, 0x0c, 0x47, 0x82, 0xca, 0xa9,
	0xfc, 0xd7, 0xa7, 0x1e, 0x18, 0xd4, 0x79, 0x0b, 0x15, 0xc3, 0xc4, 0x4e, 0xb4, 0x68, 0x66, 0xf3,
	0x78, 0x63, 0xd8, 0x94, 0xc3, 0x87, 0xe8, 0x60, 0x4d, 0xf0, 0x7e, 0xa0, 0x93, 0xce, 0x74, 0xf0,
	0x53, 0x74, 0xa0, 0x6f, 0x92, 0x9c, 0xaa, 0xdc, 0xc4, 0x7a, 0x14, 0xef, 0xeb, 0x9b, 0x31, 0x55,
	0x39, 0x7e, 0x8f, 0xfa, 0x25, 0x80, 0xbc, 0xdf, 0x93, 0x67, 0x49, 0x49, 0xa5, 0x36, 0x91, 0x1c,
	0x85, 0x8f, 0xab, 0xe5, 0xb0, 0x77, 0x09, 0x20, 0xd7, 0x76, 0xd1, 0xe8, 0x92, 0x4a, 0x1d, 0xf7,
	0xca, 0xad, 0x52, 0xb6, 0x2a, 0x79, 0x5f, 0xd0, 0xa0, 0x2b, 0x31, 0xfc, 0x0e, 0xf5, 0x76, 0x82,
	0xe7, 0x99, 0x5d, 0x23, 0x7c, 0x54, 0x2d, 0x87, 0xc7, 0x8d, 0xa1, 0x68, 0x14, 0x1f, 0xcf, 0x1a,
	0x85, 0xcc, 0x63, 0xe8, 0xf4, 0x3f, 0x19, 0xe1, 0x31, 0xea, 0xb7, 0x03, 0xbf, 0x47, 0x3c, 0xa9,
	0x96, 0x43, 0xbc, 0x3b, 0x1a, 0x8d, 0x62, 0x2c, 0x77, 0x32, 0x8d, 0xb2, 0x70, 0x72, 0xfb, 0x87,
	0x38, 0xb7, 0x15, 0x71, 0xef, 0x2a, 0xe2, 0xfe, 0xae, 0x88, 0xfb, 0xb3, 0x26, 0xce, 0x5d, 0x4d,
	0x9c, 0x5f, 0x35, 0x71, 0x3e, 0xbf, 0x65, 0x5c, 0xe7, 0xdf, 0x53, 0xff, 0xab, 0x98, 0x07, 0x33,
	0x7a, 0x4d, 0x5f, 0x5d, 0xd1, 0x54, 0xd9, 0x57, 0x2a, 0x79, 0xc6, 0x20, 0xd8, 0xdc, 0xcc, 0xbc,
	0x4c, 0x56, 0x67, 0xa3, 0x17, 0x25, 0xa8, 0x74, 0xdf, 0x5c, 0xc1, 0x9b, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x70, 0xd1, 0xa1, 0xb6, 0x52, 0x03, 0x00, 0x00,
}

func (m *JoinSessionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinSessionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Session != nil {
		{
			size := m.Session.Size()
			i -= size
			if _, err := m.Session.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *JoinSessionMessage_JoinSigningSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinSessionMessage_JoinSigningSessionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinSigningSessionMessage != nil {
		{
			size, err := m.JoinSigningSessionMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJoinSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *JoinSessionMessage_JoinKeygenSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinSessionMessage_JoinKeygenSessionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinKeygenSessionMessage != nil {
		{
			size, err := m.JoinKeygenSessionMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJoinSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *JoinSessionMessage_JoinResharingSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinSessionMessage_JoinResharingSessionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinResharingSessionMessage != nil {
		{
			size, err := m.JoinResharingSessionMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJoinSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *JoinSigningSessionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinSigningSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinSigningSessionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeerSessionIDPart) > 0 {
		i -= len(m.PeerSessionIDPart)
		copy(dAtA[i:], m.PeerSessionIDPart)
		i = encodeVarintJoinSession(dAtA, i, uint64(len(m.PeerSessionIDPart)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintJoinSession(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinKeygenSessionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinKeygenSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinKeygenSessionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeygenSessionID) > 0 {
		i -= len(m.KeygenSessionID)
		copy(dAtA[i:], m.KeygenSessionID)
		i = encodeVarintJoinSession(dAtA, i, uint64(len(m.KeygenSessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinReSharingSessionMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinReSharingSessionMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinReSharingSessionMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReSharingSessionID) > 0 {
		i -= len(m.ReSharingSessionID)
		copy(dAtA[i:], m.ReSharingSessionID)
		i = encodeVarintJoinSession(dAtA, i, uint64(len(m.ReSharingSessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintJoinSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovJoinSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JoinSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		n += m.Session.Size()
	}
	return n
}

func (m *JoinSessionMessage_JoinSigningSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinSigningSessionMessage != nil {
		l = m.JoinSigningSessionMessage.Size()
		n += 1 + l + sovJoinSession(uint64(l))
	}
	return n
}
func (m *JoinSessionMessage_JoinKeygenSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinKeygenSessionMessage != nil {
		l = m.JoinKeygenSessionMessage.Size()
		n += 1 + l + sovJoinSession(uint64(l))
	}
	return n
}
func (m *JoinSessionMessage_JoinResharingSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinResharingSessionMessage != nil {
		l = m.JoinResharingSessionMessage.Size()
		n += 1 + l + sovJoinSession(uint64(l))
	}
	return n
}
func (m *JoinSigningSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovJoinSession(uint64(l))
	}
	l = len(m.PeerSessionIDPart)
	if l > 0 {
		n += 1 + l + sovJoinSession(uint64(l))
	}
	return n
}

func (m *JoinKeygenSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeygenSessionID)
	if l > 0 {
		n += 1 + l + sovJoinSession(uint64(l))
	}
	return n
}

func (m *JoinReSharingSessionMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReSharingSessionID)
	if l > 0 {
		n += 1 + l + sovJoinSession(uint64(l))
	}
	return n
}

func sovJoinSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJoinSession(x uint64) (n int) {
	return sovJoinSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JoinSessionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinSessionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinSessionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinSigningSessionMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJoinSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinSigningSessionMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Session = &JoinSessionMessage_JoinSigningSessionMessage{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinKeygenSessionMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJoinSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinKeygenSessionMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Session = &JoinSessionMessage_JoinKeygenSessionMessage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinResharingSessionMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJoinSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJoinSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JoinReSharingSessionMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Session = &JoinSessionMessage_JoinResharingSessionMessage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJoinSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinSigningSessionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinSigningSessionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinSigningSessionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinSession
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSessionIDPart", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinSession
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerSessionIDPart = append(m.PeerSessionIDPart[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerSessionIDPart == nil {
				m.PeerSessionIDPart = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJoinSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinKeygenSessionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinKeygenSessionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinKeygenSessionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenSessionID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinSession
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeygenSessionID = append(m.KeygenSessionID[:0], dAtA[iNdEx:postIndex]...)
			if m.KeygenSessionID == nil {
				m.KeygenSessionID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJoinSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinReSharingSessionMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJoinSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinReSharingSessionMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinReSharingSessionMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReSharingSessionID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJoinSession
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJoinSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReSharingSessionID = append(m.ReSharingSessionID[:0], dAtA[iNdEx:postIndex]...)
			if m.ReSharingSessionID == nil {
				m.ReSharingSessionID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJoinSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJoinSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJoinSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJoinSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJoinSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJoinSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJoinSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJoinSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJoinSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJoinSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJoinSession = fmt.Errorf("proto: unexpected end of group")
)
